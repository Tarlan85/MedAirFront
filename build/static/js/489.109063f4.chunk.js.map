{"version":3,"file":"static/js/489.109063f4.chunk.js","mappings":"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","sources":["components/DeleteTableRow.js","components/EditTableComponent/components/CureTabType.js","components/EditTableComponent/components/InputComponent.js","components/EditTableComponent/components/UseTabs.js","components/EditTableComponent/components/EditInputType.js","components/EditTableComponent/hooks/useChildrenNode.js","components/EditTableComponent/EditTable.js","components/EditTableComponent/index.js","pages/Home/hooks/useClearPatientFormhomeValues.js","pages/Profile/context.js","components/Analiz/context.js","components/Analiz/AnalizTable.js","components/Analiz/components/Bottons.js","date/styleInput.js","components/Analiz/data.js","functions/deepCopy.js","components/Analiz/hooks/useEditRowTable.js","components/Analiz/hooks/useHandleOnClickButton.js","components/Analiz/components/UploadForm.js","components/Analiz/components/ModalAnaliz.js","components/Analiz/index.js","components/Vizit/context.js","components/EditTableComponent/hooks/useLabel.js","components/Vizit/ControlForm/BeniganForm.js","components/Vizit/ControlForm/MaliganFormİtem.js","components/Vizit/ControlForm/MaliganForm.js","components/Vizit/ControlForm/RadioButtons.js","components/Vizit/ControlForm/index.js","components/Vizit/hooks/useEditRowTable.js","components/Vizit/hooks/useAddAndResetForm.js","hooks/useResetForm.js","components/Vizit/VisitContent.js","components/Vizit/FooterButtons.js","components/Vizit/hooks/useSetDataTableOnSelectedSearchPatient.js","components/Vizit/VisitTable.js","components/Vizit/index.js","components/Family.js","components/Morbi/components/HeaderMorby.js","components/Morbi/context.js","components/Morbi/hooks/useEditRowTable.js","components/Morbi/hooks/useAddAndResetForm.js","components/Morbi/components/MorbyContent.js","components/Morbi/components/Canvas/context.js","components/Morbi/components/Canvas/canvasComponents/CanvasDesctiptions.js","components/Morbi/components/Canvas/canvasComponents/CanvasHeader.js","components/Morbi/components/Canvas/hooks/useMouseMove.js","components/Morbi/components/Canvas/canvasComponents/CanvasImages.js","components/Morbi/components/Canvas/CanvasElement.js","components/Morbi/components/Canvas/CanvasComponent.js","components/Morbi/components/Canvas/index.js","components/Morbi/components/Canvas/canvasData.js","components/Morbi/components/Canvases.js","components/Morbi/components/MorbyTable.js","components/Morbi/components/Buttons.js","components/Divider/index.js","components/Morbi/index.js","components/Potient.js","hooks/useHandleSavePotient.js","components/Anket.js","components/Mualice/components/TabsTableMualice.js","components/Mualice/context.js","components/Mualice/HeaderMualice.js","components/Mualice/components/Buttons.js","components/Mualice/hooks/useEditRowTable.js","components/Mualice/hooks/useAddAndResetForm.js","components/Mualice/MualiceContent/LeftForm.js","components/Mualice/components/Benigen.js","components/Mualice/MualiceContent/RightForm.js","components/Mualice/MualiceContent/index.js","components/Mualice/MualiceTable.js","components/Mualice/index.js","pages/Profile/Profile.js","pages/Profile/index.js"],"sourcesContent":["import { Popconfirm, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { message } from \"antd\";\r\n\r\nfunction DeleteTableRow({ dataSource, setDataSource, row, delFunct, setTablesDataToFormValues }) {\r\n    const onClick = (e) => {\r\n        setOwnPropertyId();\r\n        const newData = dataSource.filter((item) => item.Id !== row.Id);\r\n        const delEl = dataSource.find((item) => item.Id === row.Id);\r\n        if (delFunct) {\r\n            deleteFunct({ delEl, newData });\r\n        } else {\r\n            if(setTablesDataToFormValues){\r\n                setTablesDataToFormValues(newData)\r\n            }\r\n            setDataSource(newData);\r\n        }\r\n    };\r\n    const deleteFunct = async ({ delEl, newData }) => {\r\n        message.loading({ content: \"Loading...\", key: \"delete\" });\r\n        let res = await delFunct(delEl);\r\n    };\r\n    const setOwnPropertyId = () => {\r\n        if (row.Id) {\r\n            return;\r\n        } else if (row.id) {\r\n            row.Id = row.id;\r\n            dataSource.forEach((i) => (i.Id = i.id));\r\n        }\r\n    };\r\n    return (\r\n        <Typography.Link>\r\n            <div onClick={(e) => e.stopPropagation()}>\r\n                <Popconfirm\r\n                    title=\"Are you sure you want to delete this item?\"\r\n                    okText=\"Yes\"\r\n                    cancelText=\"No\"\r\n                    onConfirm={onClick}\r\n                >\r\n                    <div style={{ color: \"red\" }}>\r\n                        <DeleteOutlined />\r\n                    </div>\r\n                </Popconfirm>\r\n            </div>\r\n        </Typography.Link>\r\n    );\r\n}\r\n\r\nexport default DeleteTableRow;\r\n","import { Form, Select, Spin } from 'antd';\r\nimport React from 'react';\r\n\r\nconst { Option } = Select;\r\n\r\nconst CureTabType = ({dataIndex,title,inputRef, save}) => {\r\n\r\n    const onBlur = () => {\r\n        let inputType = 'select'\r\n        save(inputType)\r\n    }\r\n\r\n    return (\r\n        <Form.Item\r\n            style={{\r\n                margin: 0,\r\n            }}\r\n            name={dataIndex}\r\n            rules={[\r\n                {\r\n                    required: true,\r\n                    message: `Please enter the valid ${title.toLowerCase()}...`,\r\n                },\r\n            ]}\r\n        >\r\n            <Select\r\n                allowClear\r\n                ref={inputRef}\r\n                notFoundContent={<Spin size=\"small\" />}\r\n                lazyLoad\r\n                className=\"customSelect detail-select stepSelectCustomer\"\r\n                onBlur={onBlur}\r\n            >\r\n                            <Option value=\"Tabletka\">Tablet</Option>\r\n                            <Option value=\"Ampula\">Ampoule</Option>\r\n                            <Option value=\"Kapli\">Drops</Option>\r\n            </Select>\r\n        </Form.Item>\r\n    );\r\n};\r\n\r\nexport default CureTabType;","import { Form, Input } from 'antd';\r\nimport React, { memo, useMemo } from 'react';\r\n\r\nconst InputComponent = ({dataIndex, title, inputRef, save}) => {\r\n    const required = useMemo(() => {\r\n        if(dataIndex === 'cureTabUsing') return false\r\n        else return true\r\n    },[dataIndex])\r\n    return (\r\n        <Form.Item\r\n            style={{\r\n                margin: 0,\r\n            }}\r\n            name={dataIndex}\r\n            rules={[\r\n                {\r\n                    required: required,\r\n                    message: `Please enter the valid ${title.toLowerCase()}...`,\r\n                },\r\n            ]}\r\n        >\r\n            <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n        </Form.Item>\r\n    );\r\n};\r\n\r\nexport default memo(InputComponent);","import { Form, Select, Spin } from \"antd\";\r\nimport React from \"react\";\r\nimport { useGlobalContext } from \"../../../context/context\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst UseTabs = ({ dataIndex, title, inputRef, save }) => {\r\n  const { managersList } = useGlobalContext();\r\n\r\n  const onBlur = () => {\r\n    let inputType = 'select'\r\n    save(inputType)\r\n  };\r\n\r\n  return (\r\n    <Form.Item\r\n      style={{\r\n        margin: 0,\r\n      }}\r\n      name={dataIndex}\r\n      rules={[\r\n        {\r\n          required: true,\r\n          message: `Please enter the valid ${title.toLowerCase()}...`,\r\n        },\r\n      ]}\r\n    >\r\n      <Select\r\n        allowClear\r\n        ref={inputRef}\r\n        notFoundContent={<Spin size=\"small\" />}\r\n        lazyLoad\r\n        className=\"customSelect detail-select stepSelectCustomer\"\r\n        onBlur={onBlur}\r\n      >\r\n        {managersList?.map((c, index) => {\r\n          return (\r\n            <Option key={c.cureTabId} value={JSON.stringify(c)}>\r\n              {c.cureTabName}\r\n            </Option>\r\n          );\r\n        })}\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nexport default UseTabs;\r\n","import React, { memo } from \"react\";\r\nimport CureTabType from \"./CureTabType\";\r\nimport InputComponent from \"./InputComponent\";\r\nimport UseTabs from \"./UseTabs\";\r\n\r\nconst EditInputType = (props) => {\r\n  const { dataIndex, title, inputRef, save, inputType } = props;\r\n  if (\r\n    dataIndex === \"useTabs\" ||\r\n    (dataIndex === \"cureTabName\" && inputType === \"select\")\r\n  ) {\r\n    return (\r\n      <UseTabs\r\n        dataIndex={dataIndex}\r\n        title={title}\r\n        inputRef={inputRef}\r\n        save={save}\r\n      />\r\n    );\r\n  } else if (dataIndex === \"cureTabType\" && inputType === 'select') {\r\n    return (\r\n      <CureTabType\r\n        dataIndex={dataIndex}\r\n        title={title}\r\n        inputRef={inputRef}\r\n        save={save}\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <InputComponent\r\n        dataIndex={dataIndex}\r\n        title={title}\r\n        inputRef={inputRef}\r\n        save={save}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nexport default memo(EditInputType);\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useGlobalContext } from \"../../../context/context\";\r\nimport EditInputType from \"../components/EditInputType\";\r\n\r\nconst useChildrenNode = ({\r\n    title,\r\n    editable,\r\n    children,\r\n    dataIndex,\r\n    record,\r\n    handleSave,\r\n    setShowSaveButton,\r\n    form,\r\n    inputType,\r\n}) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const { managersList, isChangeTable, setIsChangeTable, isAddNewRow } =\r\n        useGlobalContext();\r\n\r\n    const inputRef = useRef(null);\r\n    useEffect(() => {\r\n        if (isAddNewRow && title === \"Ad\") {\r\n            toggleEdit();\r\n        }\r\n    }, [isAddNewRow]);\r\n    useEffect(() => {\r\n        if (editing) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [editing]);\r\n    useEffect(() => {\r\n        if (isChangeTable) {\r\n            setIsChangeTable(false);\r\n        }\r\n    }, [isChangeTable]);\r\n\r\n    const toggleEdit = () => {\r\n        if (setShowSaveButton) {\r\n            setShowSaveButton(true);\r\n        }\r\n        setIsChangeTable(true);\r\n        setEditing(!editing);\r\n        form.setFieldsValue({\r\n            [dataIndex]: record[dataIndex],\r\n        });\r\n    };\r\n\r\n    const save = async (inputType) => {\r\n        try {\r\n            const values = await form.validateFields();\r\n            if (Object.keys(values).includes(\"useTabs\") && inputType === 'select') {\r\n                const manager = JSON.parse(values.useTabs);\r\n                values.useTabs = manager.cureTabName;\r\n                values.cureTabType = manager.cureTabType;\r\n            }\r\n            if (Object.keys(values).includes(\"cureTabName\")  && inputType === 'select') {\r\n                const manager = JSON.parse(values.cureTabName);\r\n                values.cureTabName = manager.cureTabName;\r\n                values.cureTabType = manager.cureTabType;\r\n            }\r\n            toggleEdit();\r\n            handleSave({ ...record, ...values });\r\n            setIsChangeTable(true);\r\n        } catch (errInfo) {\r\n            console.log(\"Save failed:\", errInfo);\r\n        }\r\n    };\r\n\r\n    let childNode = children;\r\n\r\n    if (editable) {\r\n        childNode = editing ? (\r\n            <EditInputType\r\n                dataIndex={dataIndex}\r\n                title={title}\r\n                inputRef={inputRef}\r\n                save={save}\r\n                inputType={inputType}\r\n            />\r\n        ) : (\r\n            <div\r\n                className=\"editable-cell-value-wrap\"\r\n                style={{\r\n                    paddingRight: 24,\r\n                    height: \"35px\",\r\n                }}\r\n                onClick={toggleEdit}\r\n            >\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n    return { childNode };\r\n};\r\n\r\nexport default useChildrenNode;\r\n","import { Form, Table } from \"antd\";\r\nimport React, { memo, useContext } from \"react\";\r\nimport useChildrenNode from \"./hooks/useChildrenNode\";\r\n\r\nconst EditableContext = React.createContext(null);\r\n\r\nconst EditableRow = ({ index, ...props }) => {\r\n    const [form] = Form.useForm();\r\n    return (\r\n        <Form form={form} component={false}>\r\n            <EditableContext.Provider value={form}>\r\n                <tr {...props} />\r\n            </EditableContext.Provider>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst EditableCell = ({\r\n    title,\r\n    editable,\r\n    children,\r\n    dataIndex,\r\n    record,\r\n    handleSave,\r\n    setShowSaveButton,\r\n    inputType,\r\n    ...restProps\r\n}) => {\r\n    const form = useContext(EditableContext);\r\n\r\n    const { childNode } = useChildrenNode({\r\n        title,\r\n        editable,\r\n        children,\r\n        dataIndex,\r\n        record,\r\n        handleSave,\r\n        setShowSaveButton,\r\n        inputType,\r\n        form,\r\n    });\r\n\r\n    return <td {...restProps}>{childNode}</td>;\r\n};\r\n\r\nconst EditTable = (props) => {\r\n    const {\r\n        dataSource,\r\n        setDataSource,\r\n        defaultColumns,\r\n        setShowSaveButton,\r\n        className,\r\n    } = props;\r\n\r\n    const handleSave = (row) => {\r\n        const newData = [...dataSource];\r\n        const index = newData.findIndex((item) => row.key === item.key);\r\n        const item = newData[index];\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        setDataSource(newData);\r\n    };\r\n\r\n    const components = {\r\n        body: {\r\n            row: EditableRow,\r\n            cell: EditableCell,\r\n        },\r\n    };\r\n    const columns = defaultColumns.map((col) => {\r\n        if (!col.editable) {\r\n            return col;\r\n        }\r\n\r\n        return {\r\n            ...col,\r\n            onCell: (record) => ({\r\n                record,\r\n                editable: col.editable,\r\n                dataIndex: col.dataIndex,\r\n                title: col.title,\r\n                inputType: col.inputType,\r\n                handleSave,\r\n                setShowSaveButton,\r\n            }),\r\n        };\r\n    });\r\n    return (\r\n        <div>\r\n            <Table\r\n                className=\"my_table\"\r\n                components={components}\r\n                bordered\r\n                rowClassName={() => \"editable-row\"}\r\n                dataSource={dataSource}\r\n                columns={columns}\r\n                locale={{\r\n                    emptyText: \"...\",\r\n                }}\r\n                pagination={false}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(EditTable);\r\n","import React, { memo } from \"react\";\r\nimport EditTable from \"./EditTable\";\r\n\r\nconst index = (props) => {\r\n    return (\r\n        <>\r\n            <EditTable {...props} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default memo(index);\r\n","import { useGlobalContext } from \"../../../context/context\";\r\n\r\nfunction useClearPatientFormhomeValues() {\r\n\r\n  const {\r\n      setFormValues,\r\n      setSavedDrawingCanvas,\r\n      setDescriptionsCanvas,\r\n      setAnalizFileList,\r\n      setRecipeList,\r\n      setListRecipe,\r\n      setDataFamily,\r\n      setVisitDataTable,\r\n      setAnalisesDataTable,\r\n      setManagersPlaces,\r\n      setManagersList,\r\n      setDeseaseHistoryDynamicsList,\r\n      setIsClearForm,\r\n  } = useGlobalContext();\r\n\r\n  const clearPatient = () => {\r\n    setIsClearForm(true)\r\n      setFormValues({\r\n          Anket: { gender: \"Female\", alkogol: 0, smoke: 0 },\r\n          Potient: {},\r\n          Morbi: { familyMembersList: [] },\r\n          Vizit: {},\r\n          treatmentRB: {},\r\n          Analiz: {},\r\n      });\r\n      setSavedDrawingCanvas({});\r\n      setDescriptionsCanvas({});\r\n      setAnalizFileList({});\r\n      setRecipeList([]);\r\n      setListRecipe([]);\r\n      setDataFamily([]);\r\n      setDataFamily([]);\r\n      setVisitDataTable([]);\r\n      setAnalisesDataTable([]);\r\n      setManagersPlaces([]);\r\n      setManagersList([]);\r\n      setDeseaseHistoryDynamicsList([])\r\n  };\r\n  return { clearPatient }\r\n}\r\n\r\nexport default useClearPatientFormhomeValues","import React, { useState, createContext, useContext } from \"react\";\r\n\r\nconst ProfileContext = createContext();\r\n\r\nexport const ProfileProvider = ({ children }) => {\r\n\r\n    const [activeKey, setActiveKey] = useState()\r\n    const [canvasData, setCanvasData] = useState({})\r\n\r\n    const values = {\r\n        activeKey, setActiveKey,\r\n        canvasData, setCanvasData,\r\n    }\r\n    return (\r\n        <ProfileContext.Provider value={values}>\r\n            {children}\r\n        </ProfileContext.Provider>\r\n    );\r\n}\r\n\r\nexport const useProfileContext = () => useContext(ProfileContext);","import React, { useState, createContext, useContext } from \"react\";\r\n\r\nconst AnalizContext = createContext();\r\n\r\nexport const AnalizProvider = ({ children }) => {\r\n    const [isAdd, setIsAdd] = useState(false);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [dataSource, setdataSource] = useState([]);\r\n    const [isReset, setIsReset] = useState(false);\r\n    const [selectedRowTable, setSelectedRowTable] = useState()\r\n    const [activeRow, setActiveRow] = useState();\r\n    \r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [selectOption, setSelectOption] = useState();\r\n  const [selectedUploadFormIteem, setSelectedUploadFormIteem] = useState()\r\n  const [breastType, setBreastType] = useState();\r\n  const [fileList, setFileList] = useState([]);\r\n  const [isNew, setIsNew] = useState(false)\r\n\r\n    const values = {\r\n        isNew, setIsNew,\r\n        fileList, setFileList,\r\n        isModalOpen, setIsModalOpen,\r\n        selectOption, setSelectOption,\r\n        selectedUploadFormIteem, setSelectedUploadFormIteem,\r\n        breastType, setBreastType,\r\n\r\n        activeRow, setActiveRow,\r\n        selectedRowTable, setSelectedRowTable,\r\n        isAdd, setIsAdd,\r\n        isEdit, setIsEdit,\r\n        isReset, setIsReset,\r\n        dataSource, setdataSource,\r\n    }\r\n    return (\r\n        <AnalizContext.Provider value={values}>\r\n            {children}\r\n        </AnalizContext.Provider>\r\n    );\r\n}\r\n\r\nexport const useAnalizContext = () => useContext(AnalizContext)","import { Table } from \"antd\";\r\nimport React, { useMemo } from \"react\";\r\nimport { useGlobalContext } from \"../../context/context\";\r\nimport DeleteTableRow from \"../DeleteTableRow\";\r\nimport { useAnalizContext } from \"./context\";\r\n\r\nconst AnalizTable = () => {\r\n    const {\r\n        setSelectedRowTable,\r\n        activeRow,\r\n        setActiveRow,\r\n    } = useAnalizContext();\r\n    \r\n    const { analisesDataTable, setAnalisesDataTable } = useGlobalContext();\r\n\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Breast Type\",\r\n                dataIndex: \"analyzesType\",\r\n                key: \"analyzesType\",\r\n            },\r\n            {\r\n                title: \"Sub Type\",\r\n                dataIndex: \"analyzesSubeType\",\r\n                key: \"analyzesSubeType\",\r\n            },\r\n            {\r\n                title: \"Description\",\r\n                dataIndex: \"analyzesDesc\",\r\n                key: \"analyzesDesc\",\r\n            },\r\n            {\r\n                title: \"Date\",\r\n                dataIndex: \"date\",\r\n                key: \"date\",\r\n            },\r\n            {\r\n                title: \"Image\",\r\n                dataIndex: \"analyzesContent\",\r\n                key: \"analyzesContent\",\r\n                render: (value, row, index) => {\r\n                    return row.analyzesContent?.fileList[0]?.name\r\n                }\r\n            },\r\n            {\r\n                title: \"\",\r\n                dataIndex: \"delete\",\r\n                key: \"delete\",\r\n                width: \"20px\",\r\n                render: (value, row, index) => {\r\n                    return (\r\n                        <DeleteTableRow\r\n                            row={row}\r\n                            dataSource={analisesDataTable}\r\n                            setDataSource={setAnalisesDataTable}\r\n                        />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [analisesDataTable]);\r\n\r\n    const onClickRow = (r) => {\r\n        if(!r.key){\r\n            r.Id = new Date().getTime();\r\n            r.key = r.Id\r\n        }\r\n        setSelectedRowTable(r);\r\n        setActiveRow(r.key);\r\n    };\r\n    return (\r\n        <>\r\n            <Table\r\n                rowClassName={(record, index) =>\r\n                    record.key === activeRow && \"rowClassName_active\"\r\n                }\r\n                locale={{ emptyText: \"Document is empty\" }}\r\n                columns={columns}\r\n                dataSource={analisesDataTable}\r\n                onRow={(r) => ({\r\n                    onClick: (e) => onClickRow(r),\r\n                })}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AnalizTable;\r\n","import React, { memo } from \"react\";\r\nimport { useAnalizContext } from \"../context\";\r\n\r\nconst Bottons = () => {\r\n    const { setIsModalOpen, setActiveRow, setIsNew } =\r\n        useAnalizContext();\r\n\r\n    const addNew = () => {\r\n        setActiveRow();\r\n        setIsNew(true);\r\n        setIsModalOpen(true);\r\n    };\r\n    return (\r\n        <>\r\n            <button className=\"new_buttpn\" onClick={addNew}>\r\n                + Add new\r\n            </button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default memo(Bottons);\r\n","\r\n\r\nexport const styleInput = { width: \"300px\" }","export const breastSelectOpnions = [\r\n    \"USM\",\r\n    \"Mammography\",\r\n    \"Tomosynthesis\",\r\n    \"MRT\",\r\n    \"KT\",\r\n    \"Biopsy\",\r\n    \"Сlips\",\r\n];\r\nexport const other = [\r\n    \"Blood analysis\",\r\n    \"USM\",\r\n    \"X-ray\",\r\n    \"Bone osten\",\r\n    \"Bone naf\",\r\n    \"KT\",\r\n    \"Pet\",\r\n    \"Echocardiography\", \r\n    \"Electrocardiography\", \r\n    \"PET-CT\",\r\n    \"PET-MRI\",\r\n];\r\n","\r\n\r\nexport function deepCopy(data) {\r\n    let copy = JSON.parse(JSON.stringify(data))\r\n    return copy\r\n}","import { useEffect, useState } from \"react\";\r\nimport { useGlobalContext } from \"../../../context/context\";\r\nimport { deepCopy } from \"../../../functions/deepCopy\";\r\nimport { useAnalizContext } from \"../context\";\r\nimport { other, breastSelectOpnions } from \"../data\";\r\n\r\nconst useEditRowTable = ({ resetForm, form, putListToGlobalContext }) => {\r\n    const {\r\n        selectedRowTable,\r\n        setSelectedRowTable,\r\n        isEdit,\r\n        setIsEdit,\r\n        setActiveRow,\r\n        setBreastType,\r\n        setSelectOption,\r\n        setSelectedUploadFormIteem,\r\n        setIsModalOpen,\r\n        setFileList,\r\n    } = useAnalizContext();\r\n    \r\n    const { analisesDataTable, setAnalisesDataTable } = useGlobalContext();\r\n\r\n    const [selectedRowId, setselectedRowId] = useState();\r\n\r\n    const openOtherForm = (formObj) => {\r\n        const { analyzesType, subType, analyzesContent, analyzesSubeType } = formObj\r\n        if(analyzesType){\r\n            setBreastType(analyzesType)\r\n            if (analyzesType === \"Breast\") {\r\n                setSelectOption(breastSelectOpnions);\r\n                setSelectedUploadFormIteem(analyzesSubeType)\r\n            } else if (analyzesType === \"Other analysis\") {\r\n                setSelectOption(other);\r\n                setSelectedUploadFormIteem(analyzesSubeType)\r\n            } else {\r\n                setSelectOption(null);\r\n            }\r\n        }\r\n        if(subType){\r\n            setSelectedUploadFormIteem(subType)\r\n        }\r\n        if(analyzesContent){\r\n            const { fileList: newFileList } = analyzesContent;\r\n            setFileList(newFileList);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (selectedRowTable) {\r\n            resetForm();\r\n            let copy = deepCopy(selectedRowTable);\r\n            setselectedRowId(copy.Id);\r\n            form.setFieldsValue(copy);\r\n            setSelectedRowTable();\r\n            openOtherForm(copy)\r\n            setIsModalOpen(true);\r\n        }\r\n    }, [selectedRowTable]);\r\n\r\n    useEffect(() => {\r\n        if (isEdit) {\r\n            let findIndex = analisesDataTable.findIndex(\r\n                (i) => i.Id === selectedRowId\r\n            );\r\n\r\n            let copydataForm = deepCopy(form.getFieldsValue());\r\n            copydataForm.key = selectedRowId;\r\n            copydataForm.Id = selectedRowId;\r\n            let copyDataSource = deepCopy(analisesDataTable);\r\n            copydataForm.date = copyDataSource[findIndex].date\r\n            copyDataSource[findIndex] = copydataForm;\r\n            setAnalisesDataTable(copyDataSource);\r\n            putListToGlobalContext(copyDataSource);\r\n            resetForm();\r\n            setIsEdit();\r\n            setActiveRow();\r\n            setIsModalOpen(false);\r\n        }\r\n    }, [isEdit]);\r\n\r\n    return {};\r\n};\r\n\r\nexport default useEditRowTable;\r\n","import moment from \"moment\";\r\nimport { useGlobalContext } from \"../../../context/context\";\r\nimport { deepCopy } from \"../../../functions/deepCopy\";\r\nimport { useAnalizContext } from \"../context\";\r\nimport { breastSelectOpnions } from \"../data\";\r\nimport useEditRowTable from \"./useEditRowTable\";\r\n\r\nconst useHandleOnClickButton = ({ form }) => {\r\n    const {\r\n        setIsModalOpen,\r\n        setActiveRow,\r\n        setSelectOption,\r\n        setSelectedUploadFormIteem,\r\n        setFileList,\r\n        setBreastType,\r\n        setIsEdit,\r\n        setIsNew,\r\n    } = useAnalizContext();\r\n\r\n    const { analisesDataTable, setAnalisesDataTable } = useGlobalContext();\r\n\r\n\r\n    \r\n    const resetForm = () => {\r\n        form.resetFields();\r\n        form.setFieldsValue({breastType: 'Breast'});\r\n        setBreastType(\"Breast\");\r\n        setSelectOption(breastSelectOpnions);\r\n        setSelectedUploadFormIteem();\r\n        setFileList([]);\r\n        setIsEdit(false);\r\n        setIsNew(false);\r\n    };\r\n    const { formValues, setFormValues } = useGlobalContext();\r\n\r\n    const putListToGlobalContext = (list) => {\r\n        formValues.Analiz = { ...formValues.Analiz, analyzesMediaList: list };\r\n        setFormValues(formValues);\r\n    \r\n    }\r\n\r\n    useEditRowTable({ resetForm, form, putListToGlobalContext });\r\n\r\n    const handleAdd = () => {\r\n        let copydataForm = deepCopy(form.getFieldsValue());\r\n        copydataForm.key = new Date().getTime();\r\n        copydataForm.Id = new Date().getTime();\r\n        copydataForm.date = moment().format('YYYY-MM-DD HH:mm:ss')\r\n        setAnalisesDataTable([...analisesDataTable, copydataForm]);\r\n        putListToGlobalContext([...analisesDataTable, copydataForm])\r\n        resetForm();\r\n        setActiveRow();\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    const handleAddNext = () => {\r\n        let copydataForm = deepCopy(form.getFieldsValue());\r\n        copydataForm.key = new Date().getTime();\r\n        copydataForm.Id = new Date().getTime();\r\n        copydataForm.date = moment().format('YYYY-MM-DD HH:mm:ss')\r\n        setAnalisesDataTable([...analisesDataTable, copydataForm]);\r\n        putListToGlobalContext([...analisesDataTable, copydataForm])\r\n        resetForm();\r\n        setActiveRow();\r\n    };\r\n\r\n    const handleEdit = () => {\r\n        setIsEdit(true)\r\n    };\r\n    const handleCancel = () => {\r\n        resetForm();\r\n        setActiveRow(false);\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    return { handleAdd, handleAddNext, handleCancel, handleEdit };\r\n};\r\n\r\nexport default useHandleOnClickButton;\r\n","import { Button, Form, Upload } from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport React, { memo, useState } from \"react\";\r\nimport { styleInput } from \"../../../date/styleInput\";\r\nimport { useAnalizContext } from \"../context\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport sendRequest from \"../../../api/sendRequest\";\r\n\r\nconst UploadForm = ({ form }) => {\r\n  const { selectedUploadFormIteem, fileList, setFileList } = useAnalizContext();\r\n\r\n  const [imgURL, setImgURL] = useState();\r\n\r\n  const onChange = (e) => {\r\n    const { fileList: newFileList } = e;\r\n    setFileList(newFileList);\r\n  };\r\n\r\n  const onPreview = async (file) => {\r\n    let src = file.url;\r\n    if (!src) {\r\n      src = await new Promise((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file.originFileObj);\r\n\r\n        reader.onload = () => resolve(reader.result);\r\n      });\r\n    }\r\n    const image = new Image();\r\n    image.src = src;\r\n    const imgWindow = window.open(src);\r\n    imgWindow?.document.write(image.outerHTML);\r\n  };\r\n\r\n  console.log(\"imgURL\", imgURL);\r\n  const beforeUpload = async (file) => {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n\r\n    let res = await sendRequest(\"analysesImage\", formData, \"post\");\r\n    setImgURL(res.data);\r\n\r\n    return false;\r\n  };\r\n\r\n  if (!selectedUploadFormIteem) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Form className=\"upload_form\" form={form}>\r\n      <Form.Item label=\"Description\" name=\"analyzesDesc\">\r\n        <TextArea rows={3} style={styleInput} />\r\n      </Form.Item>\r\n      <Form.Item name=\"analyzesContent\">\r\n        <Upload\r\n          accept=\".png,.pdf,.jpeg,.jpg\"\r\n          action=\"http://localhost:3000/\"\r\n          listType=\"picture\"\r\n          beforeUpload={beforeUpload}\r\n          defaultFileList={[...fileList]}\r\n          onChange={onChange}\r\n          onPreview={onPreview}\r\n        >\r\n          {!fileList[0] ? (\r\n            <Button icon={<UploadOutlined />}>Upload</Button>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Upload>\r\n      </Form.Item>\r\n      {/* {imgURL &&\r\n\t\t\t<img src={imgURL} />\r\n\t\t} */}\r\n    </Form>\r\n  );\r\n};\r\nexport default memo(UploadForm);\r\n","import { Button, Col, Form, Modal, Row, Select } from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport React, { memo, useEffect } from \"react\";\r\nimport { styleInput } from \"../../../date/styleInput\";\r\nimport { useAnalizContext } from \"../context\";\r\nimport { other, breastSelectOpnions } from \"../data\";\r\nimport useHandleOnClickButton from \"../hooks/useHandleOnClickButton\";\r\nimport UploadForm from \"./UploadForm\";\r\n\r\nconst selectStyle = { ...styleInput, marginRight: \"10px\" };\r\n\r\nconst ModalAnaliz = () => {\r\n    const [form] = Form.useForm();\r\n\r\n    const {\r\n        isModalOpen,\r\n        selectOption,\r\n        setSelectOption,\r\n        setSelectedUploadFormIteem,\r\n        breastType,\r\n        setBreastType,\r\n        isNew,\r\n        activeRow,\r\n    } = useAnalizContext();\r\n\r\n    useEffect(() => {\r\n        if (isModalOpen && isNew) {\r\n            setSelectOption(breastSelectOpnions);\r\n            form.setFieldsValue({ analyzesType: \"Breast\" });\r\n        }\r\n    }, [isModalOpen]);\r\n\r\n    const onSelectBreastType = (e) => {\r\n        if (e === \"Breast\") {\r\n            setSelectOption(breastSelectOpnions);\r\n        } else if (e === \"Other analysis\") {\r\n            setSelectOption(other);\r\n        } else {\r\n            setSelectOption(null);\r\n        }\r\n        form.setFieldsValue({ subType: \"\" });\r\n        setSelectedUploadFormIteem();\r\n        setBreastType(e);\r\n    };\r\n    const onSelectSubType = (e) => {\r\n        setSelectedUploadFormIteem(e);\r\n    };\r\n\r\n    const { handleAdd, handleAddNext, handleCancel, handleEdit } =\r\n        useHandleOnClickButton({\r\n            form,\r\n        });\r\n\r\n    const footer = activeRow\r\n        ? [\r\n              <Button onClick={handleEdit}>Edit</Button>,\r\n              <Button onClick={handleCancel} danger type=\"primary\">\r\n                  Cancel\r\n              </Button>,\r\n          ]\r\n        : [\r\n              <Button onClick={handleAdd}>Add</Button>,\r\n              <Button onClick={handleAddNext}>Add next</Button>,\r\n              <Button onClick={handleCancel} danger type=\"primary\">\r\n                  Cancel\r\n              </Button>,\r\n          ];\r\n\r\n          \r\n    return (\r\n        <Modal\r\n            width={\"60%\"}\r\n            title=\"Analysis\"\r\n            visible={isModalOpen}\r\n            onCancel={handleCancel}\r\n            footer={footer}\r\n        >\r\n            <Row>\r\n                <Col xs={24} xl={12}>\r\n                    <Form form={form}>\r\n                        <Form.Item name=\"analyzesType\">\r\n                            <Select\r\n                                style={selectStyle}\r\n                                defaultValue={\"Breast\"}\r\n                                onSelect={onSelectBreastType}\r\n                            >\r\n                                <Select.Option value=\"Breast\">\r\n                                    Breast\r\n                                </Select.Option>\r\n                                <Select.Option value=\"Other analysis\">\r\n                                    Other analysis\r\n                                </Select.Option>\r\n                                <Select.Option value=\"Other healthcare area\">\r\n                                    Other healthcare area\r\n                                </Select.Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Col>\r\n                <Col xs={24} xl={12}>\r\n                    {selectOption && (\r\n                        <Form form={form}>\r\n                            <Form.Item label=\"Analysis type\" name=\"analyzesSubeType\">\r\n                                <Select\r\n                                    style={selectStyle}\r\n                                    onSelect={onSelectSubType}\r\n                                >\r\n                                    {selectOption?.map((i) => (\r\n                                        <Select.Option key={i} value={i}>\r\n                                            {i}\r\n                                        </Select.Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n            {selectOption ? <UploadForm form={form} /> : ''}\r\n            {breastType === \"Other healthcare area\" && (\r\n                <Form form={form}>\r\n                    <Form.Item label=\"Description\" name=\"analyzesDesc\">\r\n                        <TextArea rows={3} style={selectStyle} />\r\n                    </Form.Item>\r\n                </Form>\r\n            )}\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default memo(ModalAnaliz);\r\n","import React from 'react';\r\nimport AnalizTable from './AnalizTable';\r\nimport Bottons from './components/Bottons';\r\nimport ModalAnaliz from './components/ModalAnaliz';\r\nimport { AnalizProvider } from './context';\r\n\r\nconst index = () => {\r\n    return (\r\n        <AnalizProvider>\r\n            <Bottons />\r\n            <ModalAnaliz />\r\n            <AnalizTable />\r\n        </AnalizProvider>\r\n    );\r\n};\r\n\r\nexport default index;","import React, { useState, createContext, useContext } from \"react\";\r\n\r\nconst VisitContext = createContext();\r\n\r\nexport const VisitProvider = ({ children }) => {\r\n    const [isAdd, setIsAdd] = useState(false);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [dataSource, setdataSource] = useState([]);\r\n    const [isReset, setIsReset] = useState(false);\r\n    const [selectedRowTable, setSelectedRowTable] = useState()\r\n    const [activeRow, setActiveRow] = useState();\r\n\r\n    const [isControl, setisControl] = useState(false);\r\n    const [selectedRatioButton, setSelectedRatioButton] = useState();\r\n\r\n    const values = {\r\n        isControl, setisControl,\r\n        selectedRatioButton, setSelectedRatioButton,\r\n\r\n        activeRow, setActiveRow,\r\n        selectedRowTable, setSelectedRowTable,\r\n        isAdd, setIsAdd,\r\n        isEdit, setIsEdit,\r\n        isReset, setIsReset,\r\n        dataSource, setdataSource,\r\n    }\r\n    return (\r\n        <VisitContext.Provider value={values}>\r\n            {children}\r\n        </VisitContext.Provider>\r\n    );\r\n}\r\n\r\nexport const useVisitContext = () => useContext(VisitContext);","import React, { useMemo } from 'react';\r\n\r\nconst useLabel = ({activeRow}) => {\r\n\r\n    const label = useMemo(() => {\r\n        return (text) => {\r\n            return (\r\n                <div className={activeRow && 'rowClassName_active'}>\r\n                    {text}\r\n                </div>\r\n            );\r\n        };\r\n    }, [activeRow]);\r\n    return label\r\n};\r\n\r\nexport default useLabel;","import { Form } from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport React, { memo } from \"react\";\r\nimport { styleInput } from \"../../../date/styleInput\";\r\nimport useLabel from \"../../EditTableComponent/hooks/useLabel\";\r\nimport { useVisitContext } from \"../context\";\r\n\r\nconst BeniganForm = ({ form }) => {\r\n    const { activeRow } = useVisitContext();\r\n\r\n    const label = useLabel({ activeRow });\r\n\r\n    console.log('form',form.getFieldsValue())\r\n    return (\r\n        <Form\r\n            form={form}\r\n            labelAlign=\"right\"\r\n            labelCol={{\r\n                span: 5,\r\n            }}\r\n            wrapperCol={{\r\n                span: 13,\r\n            }}\r\n        >\r\n            <Form.Item label={label(\"Description\")} name=\"benignDescription\">\r\n                <TextArea style={styleInput} rows={3} />\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default memo(BeniganForm);\r\n","import { Checkbox, Form } from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport React, { memo, useEffect, useState } from \"react\";\r\nimport { styleInput } from \"../../../date/styleInput\";\r\nimport useLabel from \"../../EditTableComponent/hooks/useLabel\";\r\nimport { useVisitContext } from \"../context\";\r\n\r\nconst MaliganFormİtem = ({ name, form }) => {\r\n  const { activeRow } = useVisitContext();\r\n\r\n  const [checked, setChecked] = useState();\r\n\r\n  const label = useLabel({ activeRow });\r\n\r\n  const onChange = (e) => {\r\n    console.log(e);\r\n    setChecked(e);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let defaultChecked = form.getFieldsValue()[name.toLowerCase() + \"Description\"] ? true : false\r\n    setChecked(defaultChecked);\r\n    form.setFieldsValue({ [name.toLowerCase()]: defaultChecked})\r\n  },[])\r\n\r\n\r\n  return (\r\n    <Form\r\n      form={form}\r\n      className=\"control_fom\"\r\n      labelAlign=\"right\"\r\n      layout=\"inline\"\r\n      labelCol={{\r\n        span: 51,\r\n      }}\r\n      wrapperCol={{\r\n        span: 13,\r\n      }}\r\n    >\r\n      <Form.Item\r\n        valuePropName=\"checked\"\r\n        label={label(name)}\r\n        name={name.toLowerCase()}\r\n      >\r\n        <Checkbox checked={checked} onChange={onChange} />\r\n      </Form.Item>\r\n      <Form.Item\r\n        label={label(\"Description\")}\r\n        name={name.toLowerCase() + \"Description\"}\r\n      >\r\n        <TextArea style={styleInput} rows={2} />\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default memo(MaliganFormİtem);\r\n","import React, { memo } from \"react\";\r\nimport MaliganFormİtem from \"./MaliganFormİtem\";\r\n\r\nconst MaliganForm = ({form}) => {\r\n    return (\r\n        <>\r\n            <MaliganFormİtem form={form} name={\"USM\"} />\r\n            <MaliganFormİtem form={form} name={\"Blood\"} />\r\n            <MaliganFormİtem form={form} name={\"Lungs\"} />\r\n            <MaliganFormİtem form={form} name={\"Reason\"} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default memo(MaliganForm);\r\n","import { Radio } from \"antd\";\r\nimport React, { memo } from \"react\";\r\nimport { useVisitContext } from \"../context\";\r\n\r\nconst RadioButtons = () => {\r\n    const { selectedRatioButton, setSelectedRatioButton, } = useVisitContext();\r\n  \r\n    const handleModeChange = (e) => {\r\n        setSelectedRatioButton(e.target.value);\r\n    }\r\n    return (\r\n        <>\r\n            <Radio.Group\r\n                onChange={handleModeChange}\r\n                value={selectedRatioButton}\r\n                style={{\r\n                    marginBottom: 8,\r\n                }}\r\n            >\r\n                <Radio.Button value=\"Maligant\">Maligant</Radio.Button>\r\n                <Radio.Button value=\"Benign\">Benign</Radio.Button>\r\n            </Radio.Group>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default memo(RadioButtons);\r\n","import React, { memo } from \"react\";\r\nimport { useVisitContext } from \"../context\";\r\nimport BeniganForm from \"./BeniganForm\";\r\nimport MaliganForm from \"./MaliganForm\";\r\nimport RadioButtons from \"./RadioButtons\";\r\n\r\nconst ControlForm = ({ form }) => {\r\n    const { selectedRatioButton } = useVisitContext();\r\n\r\n    return (\r\n        <>\r\n            <RadioButtons />\r\n            {selectedRatioButton === \"Maligant\" && <MaliganForm form={form} />}\r\n            {selectedRatioButton === \"Benign\" && <BeniganForm form={form} />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default memo(ControlForm);\r\n","import moment from \"moment\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { deepCopy } from \"../../../functions/deepCopy\";\r\nimport { useVisitContext } from \"../context\";\r\n\r\nconst useEditRowTable = ({ resetForm, form, putListToGlobalContext }) => {\r\n    const {\r\n        selectedRowTable,\r\n        setSelectedRowTable,\r\n        isEdit,\r\n        setIsEdit,\r\n        dataSource,\r\n        setdataSource,\r\n        setActiveRow,\r\n        setisControl,\r\n        setSelectedRatioButton,\r\n    } = useVisitContext();\r\n\r\n    const [selectedRowId, setselectedRowId] = useState();\r\n\r\n    const maliganArr = ['USM','Blood','Lungs','Reason']\r\n\r\n    const openMaliganForm = (formObj) => {\r\n        maliganArr.forEach(i => {\r\n            if(formObj[i]){\r\n                setSelectedRatioButton('Maligant')\r\n            }else if(formObj[i.toLowerCase()  + 'Description']){\r\n                setSelectedRatioButton('Maligant')\r\n            }\r\n        })\r\n    }\r\n    const openDescriptionBenigan = (formObj) => {\r\n        if(formObj.benignDescription){\r\n            setSelectedRatioButton(\"Benign\")\r\n        }\r\n    }\r\n\r\n    const selectedVisitReason = (formObj) => {\r\n        if(formObj.visitReason === 'Prophylactic'){\r\n            setisControl(true)\r\n            openMaliganForm(formObj)\r\n            openDescriptionBenigan(formObj)\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (selectedRowTable) {\r\n            resetForm();\r\n            let copy = deepCopy(selectedRowTable);\r\n            setselectedRowId(copy.Id);\r\n            copy.visitDate = moment(copy.visitDate);\r\n            console.log('copy',copy)\r\n            selectedVisitReason(copy);\r\n            form.setFieldsValue(copy);\r\n            setSelectedRowTable();\r\n        }\r\n    }, [selectedRowTable]);\r\n\r\n    useEffect(() => {\r\n        if (isEdit) {\r\n            let findIndex = dataSource.findIndex(\r\n                (i) => i.Id === selectedRowId\r\n            );\r\n\r\n            let copydataForm = deepCopy(form.getFieldsValue());\r\n            copydataForm.key = selectedRowId;\r\n            copydataForm.Id = selectedRowId;\r\n            copydataForm.visitDate = moment(\r\n                copydataForm.visitDate\r\n            ).format(\"YYYY-MM-DD HH:mm\");\r\n\r\n            let copyDataSource = deepCopy(dataSource);\r\n            copyDataSource[findIndex] = copydataForm;\r\n            setdataSource(copyDataSource);\r\n            putListToGlobalContext(copyDataSource);\r\n            resetForm();\r\n            setIsEdit();\r\n            setActiveRow();\r\n        }\r\n    }, [isEdit]);\r\n\r\n    return {};\r\n};\r\n\r\nexport default useEditRowTable;\r\n","import moment from \"moment\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../../context/context\";\r\nimport { deepCopy } from \"../../../functions/deepCopy\";\r\nimport { useVisitContext } from \"../context\";\r\nimport useEditRowTable from \"./useEditRowTable\";\r\n\r\nconst useAddAndResetForm = ({ form }) => {\r\n\r\n    const {\r\n        isReset,\r\n        setIsReset,\r\n        isAdd,\r\n        setIsAdd,\r\n        dataSource,\r\n        setdataSource,\r\n        setActiveRow,\r\n        setIsEdit,\r\n\r\n        setisControl,\r\n        setSelectedRowTable,\r\n        setSelectedRatioButton,\r\n    } = useVisitContext();\r\n\r\n    const resetForm = () => {\r\n        form.setFieldsValue({});\r\n        form.resetFields();\r\n        setIsAdd(false);\r\n        setIsReset(false);\r\n        setIsEdit(false);\r\n\r\n        setisControl(false);\r\n        setSelectedRowTable()\r\n        setSelectedRatioButton()\r\n    };\r\n    const { formValues, setFormValues } = useGlobalContext();\r\n\r\n    const putListToGlobalContext = (list) => {\r\n        formValues.Vizit = { ...formValues.Vizit, patientVisitsList: list };\r\n        setFormValues(formValues);\r\n    \r\n    }\r\n\r\n    useEditRowTable({ resetForm, form, putListToGlobalContext });\r\n\r\n    useEffect(() => {\r\n        if (isAdd) {\r\n            const add = () => {\r\n                let copydataForm = deepCopy(form.getFieldsValue());\r\n                copydataForm.key = new Date().getTime();\r\n                copydataForm.Id = new Date().getTime();\r\n                copydataForm.visitDate = moment(\r\n                    copydataForm.visitDate\r\n                ).format(\"YYYY-MM-DD HH:mm\");\r\n                setdataSource([...dataSource, copydataForm]);\r\n                let list = [...dataSource, copydataForm]\r\n                putListToGlobalContext(list)\r\n                resetForm();\r\n                setActiveRow();\r\n            };\r\n            add();\r\n        }\r\n    }, [isAdd]);\r\n\r\n    useEffect(() => {\r\n        if (isReset) {\r\n            resetForm();\r\n        }\r\n    }, [isReset]);\r\n\r\n    return {};\r\n};\r\n\r\nexport default useAddAndResetForm;\r\n","import React, { useEffect } from 'react'\r\nimport { useGlobalContext } from '../context/context';\r\n\r\nfunction useResetForm({form}) {\r\n\r\n    const {isClearForm, setIsClearForm}  = useGlobalContext();\r\n\r\n    useEffect(() => {\r\n        if(form && isClearForm){\r\n            form.resetFields()\r\n            setIsClearForm(false)\r\n        }\r\n    },[isClearForm])\r\n  return {}\r\n}\r\n\r\nexport default useResetForm","import React, { memo } from \"react\";\r\nimport { Col, Form, Row } from \"antd\";\r\nimport { DatePicker, Select } from \"antd\";\r\nimport moment from \"moment\";\r\nimport { styleInput } from \"../../date/styleInput\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport ControlForm from \"./ControlForm\";\r\nimport useLabel from \"../EditTableComponent/hooks/useLabel\";\r\nimport { useVisitContext } from \"./context\";\r\nimport useAddAndResetForm from \"./hooks/useAddAndResetForm\";\r\nimport { useGlobalContext } from \"../../context/context\";\r\nimport useResetForm from \"../../hooks/useResetForm\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst VisitContent = () => {\r\n    const [form] = Form.useForm();\r\n    const { managersPlaces } = useGlobalContext();\r\n    const { activeRow, isControl, setisControl } = useVisitContext();\r\n\r\n    useAddAndResetForm({ form });\r\n\r\n    const onChangeSelectSəbəb = (e) => {\r\n        if (e === \"Prophylactic\") setisControl(true);\r\n        else setisControl(false);\r\n    }\r\n\r\n    const label = useLabel({ activeRow });\r\n\r\n    useResetForm({ form });\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={24} xl={12}>\r\n                    <Form\r\n                        form={form}\r\n                        labelAlign=\"right\"\r\n                        labelCol={{\r\n                            span: 5,\r\n                        }}\r\n                        wrapperCol={{\r\n                            span: 13,\r\n                        }}\r\n                    >\r\n                        <Form.Item label={label(\"Date\")} name=\"visitDate\">\r\n                            <DatePicker\r\n                                style={styleInput}\r\n                                format=\"YYYY-MM-DD HH:mm\"\r\n                                defaultValue={moment()}\r\n                                showTime\r\n                            />\r\n                        </Form.Item>\r\n\r\n                <Form.Item label=\"Address\" name=\"placeName\">\r\n                    <Select style={styleInput} allowClear>\r\n                        {managersPlaces.map((i) => {\r\n                            let val =\r\n                                i.placeName +\r\n                                \" \" +\r\n                                i.placeCity +\r\n                                \" \" +\r\n                                i.placeCountry;\r\n                            return <Option value={val}>{val}</Option>;\r\n                        })}\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                        <Form.Item label={label(\"Status\")} name=\"status\">\r\n                            <Select allowClear style={styleInput}>\r\n                                <Option value=\"Unsolved\">Unsolved</Option>\r\n                                <Option value=\"Approved\">Approved</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label={label(\"Reception Type\")} name=\"visitType\">\r\n                            <Select\r\n                                allowClear\r\n                                defaultValue=\"Fiziki\"\r\n                                style={styleInput}\r\n                            >\r\n                                <Option value=\"Fiziki\">Face to face</Option>\r\n                                <Option value=\"Telefon\">By phone</Option>\r\n                                <Option value=\"Chat\">By chat</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label={label(\"Sebeb\")} name=\"visitReason\">\r\n                            <Select\r\n                                onChange={onChangeSelectSəbəb}\r\n                                style={styleInput}\r\n                                allowClear\r\n                            >\r\n                                <Option value=\"Inspection\">Inspection</Option>\r\n                                <Option value=\"Treatment\">Treatment</Option>\r\n                                <Option value=\"Operation\">Operation</Option>\r\n                                <Option value=\"Control\">Control</Option>\r\n                                <Option value=\"Aesthetics\">Aesthetics</Option>\r\n                                <Option value=\"Prophylactic\">Prophylactic</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label={label(\"Description\")}\r\n                            name=\"visitDesc\"\r\n                        >\r\n                            <TextArea style={styleInput} rows={3} />\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Col>\r\n                <Col xs={24} xl={12}>\r\n                    {isControl && <ControlForm form={form} />}\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default memo(VisitContent);\r\n","import React, { memo } from \"react\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { useVisitContext } from \"./context\";\r\n\r\nconst FooterButtons = () => {\r\n    const { setIsReset, setIsAdd, setIsEdit, activeRow } = useVisitContext();\r\n\r\n    const handleAdd = () => {\r\n        setIsAdd(true);\r\n    };\r\n    const reset = () => {\r\n        setIsReset(true);\r\n    };\r\n    const handleEdit = () => {\r\n        setIsEdit(true);\r\n    };\r\n    const addButton = (\r\n        <button\r\n            onClick={handleAdd}\r\n            style={{ color: \"green\" }}\r\n            className=\"new_button\"\r\n        >\r\n            Add\r\n        </button>\r\n    );\r\n    const editButton = (\r\n        <button\r\n            onClick={handleEdit}\r\n            className=\"new_button rowClassName_active\"\r\n        >\r\n            Edit\r\n        </button>\r\n    );\r\n    return (\r\n        <div className=\"visit_footer_buttons\">\r\n            {!activeRow && (\r\n                <button\r\n                    onClick={reset}\r\n                    style={{ color: \"red\" }}\r\n                    className=\"new_button\"\r\n                >\r\n                    <DeleteOutlined />\r\n                    Clear\r\n                </button>\r\n            )}\r\n            {activeRow ? editButton : addButton}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(FooterButtons);\r\n","import { useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../../context/context\";\r\nimport { useVisitContext } from \"../context\";\r\n\r\nconst useSetDataTableOnSelectedSearchPatient = () => {\r\n    const { visitDataTable } = useGlobalContext();\r\n    const {\r\n        dataSource,\r\n        setdataSource,\r\n    } = useVisitContext();\r\n\r\n    useEffect(() => {\r\n        if(visitDataTable[0]){\r\n            setdataSource([ ...visitDataTable, ...dataSource])\r\n        }\r\n    },[visitDataTable])\r\n};\r\n\r\nexport default useSetDataTableOnSelectedSearchPatient;","import { Table } from \"antd\";\r\nimport React, { memo, useEffect, useMemo } from \"react\";\r\nimport { useGlobalContext } from \"../../context/context\";\r\nimport DeleteTableRow from \"../DeleteTableRow\";\r\nimport { useVisitContext } from \"./context\";\r\nimport FooterButtons from \"./FooterButtons\";\r\nimport useSetDataTableOnSelectedSearchPatient from \"./hooks/useSetDataTableOnSelectedSearchPatient\";\r\n\r\nconst VisitTable = () => {\r\n  const {\r\n    dataSource,\r\n    setdataSource,\r\n    setSelectedRowTable,\r\n    activeRow,\r\n    setActiveRow,\r\n  } = useVisitContext();\r\n\r\n  useSetDataTableOnSelectedSearchPatient();\r\n\r\n  const { isClearForm } = useGlobalContext();\r\n\r\n  useEffect(() => {\r\n    if (isClearForm) {\r\n      setdataSource([]);\r\n    }\r\n  }, [isClearForm]);\r\n\r\n  const columns = useMemo(() => {\r\n    return [\r\n      {\r\n        title: \"Date\",\r\n        dataIndex: \"visitDate\",\r\n        key: \"visitDate\",\r\n      },\r\n      {\r\n        title: \"Status\",\r\n        dataIndex: \"status\",\r\n        key: \"status\",\r\n      },\r\n      {\r\n        title: \"Visit type\",\r\n        dataIndex: \"visitType\",\r\n        key: \"visitType\",\r\n      },\r\n      {\r\n        title: \"Reason\",\r\n        dataIndex: \"visitReason\",\r\n        key: \"visitReason\",\r\n      },\r\n      {\r\n        title: \"Description\",\r\n        dataIndex: \"visitDesc\",\r\n        key: \"visitDesc\",\r\n      },\r\n      {\r\n        title: \"\",\r\n        dataIndex: \"delete\",\r\n        key: \"delete\",\r\n        width: \"20px\",\r\n        render: (value, row, index) => {\r\n          return (\r\n            <DeleteTableRow\r\n              row={row}\r\n              dataSource={dataSource}\r\n              setDataSource={setdataSource}\r\n            />\r\n          );\r\n        },\r\n      },\r\n    ];\r\n  }, [dataSource]);\r\n\r\n  const onClickRow = (r) => {\r\n    if (!r.key) {\r\n      r.Id = new Date().getTime();\r\n      r.key = r.Id;\r\n    }\r\n    setSelectedRowTable(r);\r\n    setActiveRow(r.key);\r\n  };\r\n  return (\r\n    <>\r\n      <FooterButtons />\r\n      <Table\r\n        rowClassName={(record, index) =>\r\n          record.key === activeRow && \"rowClassName_active\"\r\n        }\r\n        locale={{ emptyText: \"The document is empty\" }}\r\n        className=\"my_table\"\r\n        columns={columns}\r\n        dataSource={dataSource}\r\n        onRow={(r) => ({\r\n          onClick: (e) => onClickRow(r),\r\n        })}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(VisitTable);\r\n","import React, { memo } from \"react\";\r\nimport VisitContent from \"./VisitContent\";\r\nimport VisitTable from \"./VisitTable\";\r\nimport {VisitProvider} from \"./context\";\r\n\r\nconst Vizit = () => {\r\n    return (\r\n        <VisitProvider>\r\n            <VisitContent />\r\n            <VisitTable />\r\n        </VisitProvider>\r\n    );\r\n};\r\n\r\nexport default memo(Vizit);\r\n","import { Button, Form, Input, List, Select, Space } from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useGlobalContext } from \"../context/context\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport useResetForm from \"../hooks/useResetForm\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst Family = () => {\r\n  const [form] = Form.useForm();\r\n  const [onMemberClicked, setOnMemberClicked] = useState();\r\n  const [dataList, setDataList] = useState([]);\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [selectedItem, setselectedItem] = useState();\r\n  const [activList, setactivList] = useState();\r\n  const [countAddedFM, setCountAddedFM] = useState({});\r\n\r\n  const { dataFamily } = useGlobalContext();\r\n\r\n  const { isClearForm } = useGlobalContext();\r\n\r\n  useEffect(() => {\r\n    if (isClearForm) {\r\n      setDataList([]);\r\n    }\r\n  }, [isClearForm]);\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (dataFamily) {\r\n      try {\r\n        let list = [];\r\n        let count = 2;\r\n        dataFamily.forEach((i) => {\r\n          list.push({\r\n            id: count,\r\n            text: Object.keys(i)[0],\r\n          });\r\n          count += 1;\r\n        });\r\n        setDataList(list);\r\n      } catch (e) {}\r\n    }\r\n  }, []);\r\n\r\n  const arrSeveralAdd = [\r\n    \"Brother\",\r\n    \"Sister\",\r\n    \"Father's-brother\",\r\n    \"Mother's-brother\",\r\n    \"Father's-sister\",\r\n    \"Mother's-sister\",\r\n  ];\r\n\r\n  const onClickAddFamilyMember = () => {\r\n    if (selectedItem) {\r\n      const findEl = dataList.find((i) => i.text === selectedItem);\r\n      if (!findEl) {\r\n        let a = {\r\n          id: new Date().getUTCMilliseconds(),\r\n          text: selectedItem,\r\n        };\r\n        setDataList([...dataList, a]);\r\n      } else if (arrSeveralAdd.includes(selectedItem)) {\r\n        let s = selectedItem;\r\n        let count = countAddedFM[selectedItem] || 2;\r\n        s += \"_\" + count;\r\n        count += 1;\r\n        setCountAddedFM({ [selectedItem]: count });\r\n        let a = {\r\n          id: new Date().getUTCMilliseconds(),\r\n          text: s,\r\n        };\r\n        setDataList([...dataList, a]);\r\n      }\r\n    }\r\n  };\r\n  const deleteList = (e, item) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    dataList.forEach((list) => {\r\n      if (list.id === item.id) setactivList(null);\r\n    });\r\n    let newDataList = dataList.filter((list) => list.id !== item.id);\r\n    setDataList(newDataList);\r\n  };\r\n  const onClickList = (list) => {\r\n    setactivList(list.id);\r\n    setOnMemberClicked(list.text);\r\n    showModal();\r\n  };\r\n  const onSelect = (e) => {\r\n    setselectedItem(e);\r\n  };\r\n  \r\n  useResetForm({form})\r\n\r\n  return (\r\n    <>\r\n      <Form\r\n            form={form}\r\n        className=\"collapsForm\"\r\n        labelAlign=\"right\"\r\n        labelCol={{\r\n          span: 5,\r\n        }}\r\n        wrapperCol={{\r\n          span: 13,\r\n        }}\r\n      >\r\n        <Form.Item label=\"Family members \">\r\n          <Space style={{ display: \"flex\", alignItems: \"center\" }}>\r\n            <Form.Item>\r\n              <Select\r\n                allowClear\r\n                onSelect={onSelect}\r\n                defaultValue=\"\"\r\n                style={{ width: \"200px\" }}\r\n              >\r\n                <Option value=\"Mother\">Mother</Option>\r\n                <Option value=\"Father\">Father</Option>\r\n                <Option value=\"Maternal-grandmother\">\r\n                  Maternal grandmother\r\n                </Option>\r\n                <Option value=\"Ata-Ana\">Paternal grandmother</Option>\r\n                <Option value=\"Ata-Ata\">Paternal grandfather</Option>\r\n                <Option value=\"Ana-Ata\">Maternal grandfather</Option>\r\n                <Option value=\"Brother\">Brother</Option>\r\n                <Option value=\"Sister\">Sister</Option>\r\n                <Option value=\"Father's-brother\">Father's brother</Option>\r\n                <Option value=\"Mother's-brother\">Mother's brother</Option>\r\n                <Option value=\"Father's-sister\">Father's sister</Option>\r\n                <Option value=\"Mother's-sister\">Mother's sister</Option>\r\n              </Select>\r\n            </Form.Item>\r\n\r\n            <button style={{marginBottom: \"22px\"}} className=\"new_button\" onClick={onClickAddFamilyMember}>\r\n              Add\r\n            </button>\r\n          </Space>\r\n        </Form.Item>\r\n      </Form>\r\n\r\n      <div className=\"family-list\">\r\n        <Form\r\n            form={form}\r\n          className=\"collapsForm\"\r\n          labelAlign=\"right\"\r\n          labelCol={{\r\n            span: 5,\r\n          }}\r\n          wrapperCol={{\r\n            span: 13,\r\n          }}\r\n          style={{ width: \"400px\" }}\r\n        >\r\n          {dataList.map((item) => (\r\n            <Form.Item key={item.id}>\r\n              <Input\r\n                style={\r\n                  activList === item.id\r\n                    ? {\r\n                        backgroundColor: \"#F0F8FF\",\r\n                        textDecoration: \"underline\",\r\n                        fontSize: \"20px\",\r\n                        width: \"200px\",\r\n                      }\r\n                    : { width: \"200px\" }\r\n                }\r\n                suffix={\r\n                  <DeleteOutlined\r\n                    style={{ color: \"red\" }}\r\n                    onClick={(e) => deleteList(e, item)}\r\n                  />\r\n                }\r\n                onClick={() => onClickList(item)}\r\n                value={item.text}\r\n                readOnly\r\n              />\r\n            </Form.Item>\r\n          ))}\r\n        </Form>\r\n      </div>\r\n      {isModalVisible && activList ? (\r\n        <ModalFamily\r\n          isModalVisible={isModalVisible}\r\n          onMemberClicked={onMemberClicked}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Family;\r\n\r\nconst ModalFamily = (props) => {\r\n  const { onMemberClicked, isModalVisible } = props;\r\n\r\n  const [form] = Form.useForm();\r\n  const { dataFamily, setDataFamily } = useGlobalContext();\r\n\r\n  const [trauma, setTrauma] = useState(\"\");\r\n  const [dead, setDead] = useState(\"\");\r\n  const [alive, setAlive] = useState(\"\");\r\n  const [description, setdescription] = useState();\r\n\r\n  const saveDataFamily = () => {\r\n    let dataObj = {\r\n      trauma,\r\n      dead,\r\n      alive,\r\n      description,\r\n    };\r\n    const member = dataFamily.find((m) => m[onMemberClicked]);\r\n    if (member) {\r\n      const index = dataFamily.findIndex((m) => m[onMemberClicked]);\r\n      dataFamily[index] = { [onMemberClicked]: { ...dataObj } };\r\n      setDataFamily([...dataFamily]);\r\n    } else {\r\n      setDataFamily([...dataFamily, { [onMemberClicked]: dataObj }]);\r\n    }\r\n  };\r\n\r\n  const fillForm = (t, d, a, des) => {\r\n    form.setFieldsValue({\r\n      trauma: t,\r\n      dead: d,\r\n      alive: a,\r\n      description: des,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (onMemberClicked) {\r\n      const member = dataFamily.find((m) => m[onMemberClicked]);\r\n\r\n      if (member) {\r\n        let m = member[onMemberClicked];\r\n        setTrauma(m.trauma);\r\n        setDead(m.dead);\r\n        setAlive(m.alive);\r\n        setdescription(m.description);\r\n        fillForm(m.trauma, m.dead, m.alive, m.description);\r\n      } else {\r\n        setTrauma(\"\");\r\n        setDead(\"\");\r\n        setAlive(\"\");\r\n        setdescription(\"\");\r\n        form.resetFields();\r\n      }\r\n    }\r\n  }, [onMemberClicked]);\r\n\r\n  useEffect(() => {\r\n    if (isModalVisible) {\r\n      saveDataFamily();\r\n    }\r\n  }, [trauma, dead, alive, description]);\r\n\r\n  return (\r\n    <Form\r\n      labelAlign=\"right\"\r\n      labelCol={{\r\n        span: 9,\r\n      }}\r\n      wrapperCol={{\r\n        span: 15,\r\n      }}\r\n      form={form}\r\n      style={{\r\n        background: \"#E0E0E0\",\r\n        border: \"1px solid #C8C8C8\",\r\n        boxShadow: \"10px 5px 5px #C0C0C0\",\r\n        padding: \"10px\",\r\n        maxWidth: '400px'\r\n      }}\r\n      \r\n    >\r\n      <Form.Item label=\"Trauma\" name=\"trauma\">\r\n        <Input\r\n          allowClear\r\n          value={trauma}\r\n          onChange={(e) => setTrauma(e.target.value)}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item label=\"Deceased of cancer\" name=\"dead\">\r\n        <Input\r\n          allowClear\r\n          value={dead}\r\n          onChange={(e) => setDead(e.target.value)}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item label=\"Living with cancer\" name=\"alive\">\r\n        <Input\r\n          allowClear\r\n          value={alive}\r\n          onChange={(e) => setAlive(e.target.value)}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item label=\"Description\" name=\"description\">\r\n        <TextArea\r\n          value={description}\r\n          onChange={(e) => setdescription(e.target.value)}\r\n          rows={3}\r\n        />\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n","import { Col, Form, Radio, Row, Select } from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { useGlobalContext } from \"../../../context/context\";\r\nimport Family from \"../../Family\";\r\nimport { styleInput } from \"../../../date/styleInput\";\r\nimport { useLayoutEffect } from \"react\";\r\nimport useResetForm from \"../../../hooks/useResetForm\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst HeaderMorby = () => {\r\n  const [form] = Form.useForm();\r\n  const { formValues, setFormValues } = useGlobalContext();\r\n\r\n  const [ownInjuryReason, setownInjuryReason] = useState();\r\n\r\n  const onFieldsChange = ([{ name, value }]) => {\r\n    formValues.Morbi = { ...formValues.Morbi, [name]: value };\r\n    setFormValues(formValues);\r\n  };\r\n\r\n  useLayoutEffect(() => {\r\n    if (formValues.Morbi.ownInjuryReason) {\r\n      setownInjuryReason(1);\r\n    }\r\n  }, [formValues.Morbi]);\r\n\r\n  useResetForm({form})\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col xs={24} xl={12}>\r\n          <Form\r\n            form={form}\r\n            initialValues={{\r\n              ...formValues.Morbi,\r\n              Received_traumas: formValues.Morbi.ownInjuryReason ? 1 : null,\r\n            }}\r\n            onFieldsChange={onFieldsChange}\r\n            className=\"collapsForm\"\r\n            labelAlign=\"right\"\r\n            labelCol={{\r\n              span: 5,\r\n            }}\r\n            wrapperCol={{\r\n              span: 13,\r\n            }}\r\n          >\r\n            <Form.Item label=\"Allergies\" name=\"allergyAvailability\">\r\n              <TextArea style={styleInput} rows={3} />\r\n            </Form.Item>\r\n            <Form.Item label=\"Receved treatement\" name=\"medicationTaken\">\r\n              <TextArea style={styleInput} rows={3} />\r\n            </Form.Item>\r\n            <Form.Item label=\"Initial diagnosis\" name=\"preliminaryDiagnosis\">\r\n              <TextArea allowClear style={styleInput} rows={3} />\r\n            </Form.Item>\r\n            <Form.Item label=\"Received traumas\" name=\"Received_traumas\">\r\n              <Radio.Group\r\n                value={ownInjuryReason}\r\n                defaultValue={ownInjuryReason}\r\n                onChange={(e) => setownInjuryReason(e.target.value)}\r\n              >\r\n                <Radio value={1}>Yes</Radio>\r\n                <Radio value={2}>No</Radio>\r\n              </Radio.Group>\r\n            </Form.Item>\r\n            {ownInjuryReason === 1 && (\r\n              <Form.Item label=\"Description\" name=\"ownInjuryReason\">\r\n                <TextArea style={styleInput} />\r\n              </Form.Item>\r\n            )}\r\n            <Form.Item label=\"Malignant\" name=\"maliqan\">\r\n              <Select style={styleInput} allowClear>\r\n                <Option value={\"Sağ\"}>Right</Option>\r\n                <Option value={\"Sol\"}>Left</Option>\r\n              </Select>\r\n            </Form.Item>\r\n            <Form.Item label=\"Benign\" name=\"beniqen\">\r\n              <Select style={styleInput}>\r\n                <Option value={\"Sağ\"}>Right</Option>\r\n                <Option value={\"Sol\"}>Left</Option>\r\n              </Select>\r\n            </Form.Item>\r\n            <Form.Item label=\"Malignant?\" name=\"maliqanQuestion\">\r\n              <Select style={styleInput} allowClear>\r\n                <Option value={\"Sağ\"}>Right</Option>\r\n                <Option value={\"Sol\"}>Left</Option>\r\n              </Select>\r\n            </Form.Item>\r\n          </Form>\r\n        </Col>\r\n        <Col xs={24} xl={12}>\r\n          <Family />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HeaderMorby;\r\n","import React, { useState, createContext, useContext } from \"react\";\r\n\r\nconst MorbyContext = createContext();\r\n\r\nexport const MorbyProvider = ({ children }) => {\r\n    const [morbyFormTableData, setMorbyFormTableData] = useState({})\r\n    const [dataSource, setdataSource] = useState([]);\r\n    const [isReset, setIsReset] = useState(false);\r\n    \r\n    const [isAdd, setIsAdd] = useState(false);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [selectedRowTable, setSelectedRowTable] = useState()\r\n    const [activeRow, setActiveRow] = useState();\r\n    \r\n\r\n    const [ihkEr, setihkEr] = useState();\r\n    const [ihkPr, setihkPr] = useState();\r\n    const [ihkHer2, setihkHer2] = useState();\r\n\r\n    const values = {\r\n        isReset, setIsReset,\r\n        morbyFormTableData, setMorbyFormTableData,\r\n        dataSource, setdataSource,\r\n        \r\n        activeRow, setActiveRow,\r\n        selectedRowTable, setSelectedRowTable,\r\n        isAdd, setIsAdd,\r\n        isEdit, setIsEdit,\r\n\r\n        ihkEr, setihkEr,\r\n        ihkPr, setihkPr,\r\n        ihkHer2, setihkHer2,\r\n    }\r\n    return (\r\n        <MorbyContext.Provider value={values}>\r\n            {children}\r\n        </MorbyContext.Provider>\r\n    );\r\n}\r\n\r\nexport const useMorbyContext = () => useContext(MorbyContext);","import { useEffect, useState } from \"react\";\r\nimport { useGlobalContext } from \"../../../context/context\";\r\nimport { deepCopy } from \"../../../functions/deepCopy\";\r\nimport { useMorbyContext } from \"../context\";\r\n\r\nconst useEditRowTable = ({ resetForm, form }) => {\r\n  const {\r\n    selectedRowTable,\r\n    setSelectedRowTable,\r\n    isEdit,\r\n    setIsEdit,\r\n    setActiveRow,\r\n    setihkEr,\r\n    setihkPr,\r\n    setihkHer2,\r\n  } = useMorbyContext();\r\n\r\n  const { deseaseHistoryDynamicsList, setDeseaseHistoryDynamicsList } =\r\n    useGlobalContext();\r\n\r\n  const [selectedRowId, setselectedRowId] = useState();\r\n\r\n  const openOtherForm = (formObj) => {\r\n    if (formObj.ihkEr === 1 || formObj.erN) {\r\n      setihkEr(1);\r\n      form.setFieldsValue({ihkEr: 1})\r\n    }\r\n    if (formObj.ihkPr === 1 || formObj.prN) {\r\n      setihkPr(1);\r\n      form.setFieldsValue({ihkPr: 1})\r\n    }\r\n    if (formObj.ihkHer2 === 2) {\r\n      setihkHer2(2);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedRowTable) {\r\n      let copy = deepCopy(selectedRowTable);\r\n      setselectedRowId(copy.Id);\r\n      resetForm();\r\n      form.setFieldsValue(copy);\r\n      setSelectedRowTable();\r\n      openOtherForm(copy);\r\n    }\r\n  }, [selectedRowTable]);\r\n\r\n  useEffect(() => {\r\n    if (isEdit) {\r\n      let findIndex = deseaseHistoryDynamicsList.findIndex(\r\n        (i) => i.Id === selectedRowId\r\n      );\r\n\r\n      let copydataForm = deepCopy(form.getFieldsValue());\r\n      copydataForm.key = selectedRowId;\r\n      copydataForm.Id = selectedRowId;\r\n      let copyDataSource = deepCopy(deseaseHistoryDynamicsList);\r\n      copyDataSource[findIndex] = copydataForm;\r\n      setDeseaseHistoryDynamicsList(copyDataSource);\r\n      resetForm();\r\n      setIsEdit();\r\n      setActiveRow();\r\n    }\r\n  }, [isEdit]);\r\n\r\n  return {};\r\n};\r\n\r\nexport default useEditRowTable;\r\n","import React, { useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../../context/context\";\r\nimport { deepCopy } from \"../../../functions/deepCopy\";\r\nimport { useMorbyContext } from \"../context\";\r\nimport useEditRowTable from \"./useEditRowTable\";\r\n\r\nconst useAddAndResetForm = ({ form }) => {\r\n    const {\r\n        isReset,\r\n        setIsReset,\r\n        isAdd,\r\n        setIsAdd,\r\n        setActiveRow,\r\n        setIsEdit,\r\n        setihkEr,\r\n        setihkPr,\r\n        setihkHer2,\r\n    } = useMorbyContext();\r\n\r\n    const { deseaseHistoryDynamicsList, setDeseaseHistoryDynamicsList } =\r\n        useGlobalContext();\r\n\r\n    const resetForm = () => {\r\n        form.setFieldsValue({});\r\n        form.resetFields();\r\n        setIsAdd(false);\r\n        setIsReset(false);\r\n        setIsEdit(false);\r\n        setihkEr();\r\n        setihkPr();\r\n        setihkHer2();\r\n    };\r\n\r\n    useEditRowTable({ resetForm, form });\r\n\r\n    useEffect(() => {\r\n        if (isAdd) {\r\n            const add = () => {\r\n                let copydataForm = deepCopy(form.getFieldsValue());\r\n                copydataForm.key = new Date().getTime();\r\n                copydataForm.Id = new Date().getTime();\r\n                console.log('copydataForm',copydataForm)\r\n                setDeseaseHistoryDynamicsList([\r\n                    ...deseaseHistoryDynamicsList,\r\n                    copydataForm,\r\n                ]);\r\n                resetForm();\r\n                setActiveRow();\r\n            };\r\n            add();\r\n        }\r\n    }, [isAdd]);\r\n\r\n    useEffect(() => {\r\n        if (isReset) {\r\n            resetForm();\r\n        }\r\n    }, [isReset]);\r\n\r\n    return {};\r\n};\r\n\r\nexport default useAddAndResetForm;\r\n","import { Col, Form, Input, InputNumber, Radio, Row, Select, Space } from \"antd\";\r\nimport React from \"react\";\r\nimport { useGlobalContext } from \"../../../context/context\";\r\nimport { styleInput } from \"../../../date/styleInput\";\r\nimport useResetForm from \"../../../hooks/useResetForm\";\r\nimport useLabel from \"../../EditTableComponent/hooks/useLabel\";\r\nimport { useMorbyContext } from \"../context\";\r\nimport useAddAndResetForm from \"../hooks/useAddAndResetForm\";\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\n\r\nconst MorbyContent = () => {\r\n  const [form] = Form.useForm();\r\n  const { ihkEr, setihkEr, ihkPr, setihkPr, ihkHer2, setihkHer2, activeRow } =\r\n    useMorbyContext();\r\n\r\n  useAddAndResetForm({ form });\r\n\r\n  const label = useLabel({ activeRow });\r\n\r\n  useResetForm({ form });\r\n  const { pathologistsList } = useGlobalContext();\r\n\r\n  return (\r\n    <Row>\r\n      <Col xs={24} xl={12}>\r\n        <Form\r\n          form={form}\r\n          className=\"collapsForm\"\r\n          labelAlign=\"right\"\r\n          labelCol={{\r\n            span: 5,\r\n          }}\r\n          wrapperCol={{\r\n            span: 13,\r\n          }}\r\n        >\r\n          <Form.Item label={label(\"Breast\")} name=\"complaintBreastType\">\r\n            <Select allowClear style={styleInput}>\r\n              <Option value=\"no\">Missing</Option>\r\n              <Option value=\"right\">Right</Option>\r\n              <Option value=\"left\">Left</Option>\r\n              <Option value=\"both\">Both</Option>\r\n              <Option value=\"postmastektR\">Post mastectomy right</Option>\r\n              <Option value=\"postmastektL\">Post mastectomy left</Option>\r\n              <Option value=\"axilaR\">Axilla right</Option>\r\n              <Option value=\"axilaL\">Axilla left</Option>\r\n              <Option value=\"anotherBrestR\">Extra breast right</Option>\r\n              <Option value=\"anotherBrestL\">Extra breast left</Option>\r\n              <Option value=\"anotherBrestBoth\">Both extra breasts</Option>\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item\r\n            label={label(\"Duration of illness\")}\r\n            name=\"durationOfIllness\"\r\n          >\r\n            <Input style={styleInput} />\r\n          </Form.Item>\r\n          <Form.Item label={label(\"Complaints\")} name=\"complaintDescription\">\r\n            <TextArea style={styleInput} rows={3} />\r\n          </Form.Item>\r\n        </Form>\r\n      </Col>\r\n      <Col xs={24} xl={12}>\r\n        <Form\r\n          form={form}\r\n          className=\"collapsForm\"\r\n          labelAlign=\"right\"\r\n          labelCol={{\r\n            span: 5,\r\n          }}\r\n          wrapperCol={{\r\n            span: 13,\r\n          }}\r\n        >\r\n          <Form.Item label={label(\"ER\")} name=\"ihkEr\">\r\n            <Radio.Group onChange={(e) => setihkEr(e.target.value)}>\r\n              <Space style={styleInput} direction=\"horizontal\">\r\n                <Radio value={1}>Positive</Radio>\r\n                <Radio value={2}>Negative</Radio>\r\n              </Space>\r\n            </Radio.Group>\r\n          </Form.Item>\r\n          {ihkEr === 1 && (\r\n            <Form.Item label={label(\"N\")} name=\"erN\">\r\n              <InputNumber style={styleInput} />\r\n            </Form.Item>\r\n          )}\r\n          <Form.Item label={label(\"PR\")} name=\"ihkPr\">\r\n            <Radio.Group onChange={(e) => setihkPr(e.target.value)}>\r\n              <Space style={styleInput} direction=\"horizontal\">\r\n                <Radio value={1}>Positive</Radio>\r\n                <Radio value={2}>Negative</Radio>\r\n              </Space>\r\n            </Radio.Group>\r\n          </Form.Item>\r\n          {ihkPr === 1 && (\r\n            <Form.Item label={label(\"N\")} name=\"prN\">\r\n              <InputNumber style={styleInput} />\r\n            </Form.Item>\r\n          )}\r\n          <Form.Item label={label(\"HER2\")} name=\"her2\">\r\n            <InputNumber\r\n              style={styleInput}\r\n              value={ihkHer2}\r\n              onChange={(e) => setihkHer2(e)}\r\n              min={0}\r\n              max={3}\r\n              defaultValue={0}\r\n            />\r\n          </Form.Item>\r\n          {ihkHer2 === 2 && (\r\n            <Form.Item label={label(\"FT\")} name=\"her2FT\">\r\n              <Input />\r\n            </Form.Item>\r\n          )}\r\n          <Form.Item label={label(\"K67\")} name=\"k67\">\r\n            <InputNumber style={styleInput} min={0} defaultValue={0} />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Pathologist\" name=\"pathologist\">\r\n            <Select style={styleInput} allowClear>\r\n              {pathologistsList.map((i) => {\r\n                return (\r\n                  <Select.Option value={i.pathologistName}>\r\n                    {i.pathologistName}\r\n                  </Select.Option>\r\n                );\r\n              })}\r\n            </Select>\r\n          </Form.Item>\r\n        </Form>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default MorbyContent;\r\n","import React, { useState, createContext, useContext } from \"react\";\r\n\r\nconst CanvasContext = createContext();\r\n\r\nexport const CanvasProvider = ({ children }) => {\r\n    const [convasImagesArrIndex, setConvasImagesArrIndex] = useState(0)\r\n    const [canvasColor, setCanvasColor] = useState(\"green\");\r\n    const [disableCanvas, setDisableCanvas] = useState(true);\r\n    const [imagesLength, setImagesLength] = useState()\r\n    const [colorNumbersCanvas, setColorNumbersCanvas] = useState({})\r\n    const [descriptionInputValue, setDescriptionInputValue] = useState()\r\n    const [brushRadius, setBrushRadius] = useState(20);\r\n\r\n    const values = {\r\n        brushRadius, setBrushRadius,\r\n        descriptionInputValue, setDescriptionInputValue,\r\n        colorNumbersCanvas, setColorNumbersCanvas,\r\n        imagesLength, setImagesLength,\r\n        disableCanvas, setDisableCanvas,\r\n        canvasColor, setCanvasColor,\r\n        convasImagesArrIndex, setConvasImagesArrIndex,\r\n    }\r\n    return (\r\n        <CanvasContext.Provider value={values}>\r\n            {children}\r\n        </CanvasContext.Provider>\r\n    );\r\n}\r\n\r\nexport const useCanvasContext = () => useContext(CanvasContext);","import { Card, Space } from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../../../../context/context\";\r\nimport { styleInput } from \"../../../../../date/styleInput\";\r\nimport { useCanvasContext } from \"../context\";\r\nconst CanvasDesctiptions = ({ imgName, refConvas }) => {\r\n    const {\r\n        canvasColor,\r\n        descriptionInputValue,\r\n        setDescriptionInputValue,\r\n    } = useCanvasContext();\r\n    const { descriptionsCanvas, setDescriptionsCanvas } = useGlobalContext();\r\n\r\n\r\n    const compyutationColorNumber = () => {\r\n        let colorNumber = 0\r\n        let data = refConvas.current.getSaveData();\r\n        data = data ? JSON.parse(data) : ''\r\n        if (data?.lines[0]) {\r\n            data.lines.forEach(i => {\r\n                if(i.brushColor === canvasColor){\r\n                    colorNumber += 1\r\n                }\r\n            })\r\n        }\r\n\r\n        return colorNumber ? colorNumber : 1\r\n    }\r\n\r\n    const onChangeDescription = (e) => {\r\n        let colorNumber = compyutationColorNumber()\r\n        setDescriptionInputValue(e.target.value);\r\n        let objProperty = imgName + canvasColor + colorNumber;\r\n        descriptionsCanvas[objProperty] = e.target.value;\r\n        setDescriptionsCanvas(descriptionsCanvas);\r\n    };\r\n\r\n    useEffect(() => {\r\n        let colorNumber = compyutationColorNumber()\r\n        let objProperty = imgName + canvasColor + colorNumber;\r\n        if (Object.hasOwn(descriptionsCanvas, objProperty)) {\r\n            setDescriptionInputValue(descriptionsCanvas[objProperty]);\r\n        } else setDescriptionInputValue(\"\");\r\n    }, [canvasColor]);\r\n    return (\r\n        <Space\r\n            direction=\"vertical\"\r\n            size=\"middle\"\r\n            style={{\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n            }}\r\n        >\r\n            <Card title=\"Desctiptions\" size=\"small\">\r\n                <Space direction=\"horizontal\">\r\n                    <div\r\n                        style={{\r\n                            width: \"40px\",\r\n                            height: \"40px\",\r\n                            backgroundColor: canvasColor,\r\n                            borderRadius: \"50%\",\r\n                        }}\r\n                    ></div>\r\n                    <TextArea\r\n                        value={descriptionInputValue}\r\n                        onChange={onChangeDescription}\r\n                        style={styleInput}\r\n                    />\r\n                </Space>\r\n            </Card>\r\n        </Space>\r\n    );\r\n};\r\n\r\nexport default CanvasDesctiptions;\r\n","import { Popconfirm, Row, Select } from \"antd\";\r\nimport React, { memo, useEffect, useState } from \"react\";\r\nimport { RetweetOutlined } from \"@ant-design/icons\";\r\nimport { useCanvasContext } from \"../context\";\r\nimport { useGlobalContext } from \"../../../../../context/context\";\r\n\r\nconst CanvasHeader = (props) => {\r\n  const { refConvas, imgName } = props;\r\n\r\n  const {\r\n    setConvasImagesArrIndex,\r\n    setCanvasColor,\r\n    setDisableCanvas,\r\n    imagesLength,\r\n    setBrushRadius,\r\n  } = useCanvasContext();\r\n  const { savedDrawingCanvas, setSavedDrawingCanvas, isClearForm } = useGlobalContext();\r\n\r\n  const [disableAddBtn, setdisableAddBtn] = useState(false);\r\n  const [disableSaveBtn, setdisableSaveBtn] = useState(true);\r\n\r\n  const handleAdd = () => {\r\n    setBrushRadius(20);\r\n    setdisableAddBtn(true);\r\n    setDisableCanvas(false);\r\n    setdisableSaveBtn(false);\r\n  };\r\n  const handleSave = () => {\r\n    setBrushRadius(0);\r\n    setdisableAddBtn(false);\r\n    setDisableCanvas(true);\r\n    setdisableSaveBtn(true);\r\n    let data = refConvas.current.getSaveData();\r\n    savedDrawingCanvas[imgName] = data;\r\n    setSavedDrawingCanvas(savedDrawingCanvas);\r\n  };\r\n  const handleClear = () => {\r\n    refConvas.current.undo();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isClearForm) {\r\n      refConvas.current.clear();\r\n    }\r\n  }, [isClearForm]);\r\n  \r\n  const onSelect = (e) => {\r\n    setCanvasColor(e);\r\n  };\r\n  const nextCanvas = (index) => {\r\n    if (imagesLength === 1) {\r\n      return 0;\r\n    } else if (index === imagesLength - 1) {\r\n      return 0;\r\n    } else return index + 1;\r\n  };\r\n  const changeConvasImg = () => {\r\n    setConvasImagesArrIndex(nextCanvas);\r\n  };\r\n  return (\r\n    <Row>\r\n      <button\r\n        disabled={disableAddBtn}\r\n        onClick={handleAdd}\r\n        type=\"button\"\r\n        className=\"new_button\"\r\n      >\r\n        Add\r\n      </button>\r\n      <button\r\n        disabled={disableSaveBtn}\r\n        type=\"button\"\r\n        onClick={handleSave}\r\n        className={\r\n          disableSaveBtn ? \"new_button\" : \"new_button new-success-button\"\r\n        }\r\n      >\r\n        Save\r\n      </button>\r\n      <button onClick={handleClear} className=\"new_button\">\r\n        Clear\r\n      </button>\r\n      <Select onSelect={onSelect} defaultValue=\"green\" style={{ width: 150 }}>\r\n        <Select.Option value=\"green\">Benign tumor</Select.Option>\r\n        <Select.Option value=\"red\">Maligan tumor</Select.Option>\r\n        <Select.Option value=\"black\">Maligan ?</Select.Option>\r\n        <Select.Option value=\"blue\">My operation</Select.Option>\r\n        <Select.Option value=\"#AA00FF\">Operated not by me</Select.Option>\r\n      </Select>\r\n\r\n      {imagesLength === 1 ? '' : disableSaveBtn ? (\r\n        <button onClick={changeConvasImg} className=\"new_button\">\r\n          <RetweetOutlined />\r\n        </button>\r\n      ) : (\r\n        <Popconfirm\r\n          title=\"Data will not be saved?\"\r\n          okText=\"Yes\"\r\n          cancelText=\"No\"\r\n          onConfirm={changeConvasImg}\r\n        >\r\n          <button className=\"new_button\">\r\n            <RetweetOutlined />\r\n          </button>\r\n        </Popconfirm>\r\n      )}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default memo(CanvasHeader);\r\n","import { useState } from \"react\";\r\nimport { useGlobalContext } from \"../../../../../context/context\";\r\nimport { useCanvasContext } from \"../context\";\r\n\r\nconst useMouseMove = ({refConvas, imgName}) => {\r\n    const { disableCanvas, setDescriptionInputValue, setCanvasColor } = useCanvasContext();\r\n    const { descriptionsCanvas } = useGlobalContext();\r\n\r\n    const [XpositionMouse, setXpositionMouse] = useState()\r\n    const [YpositionMouse, setYpositionMouse] = useState()\r\n\r\n    const handleMouseMove = (event) => {\r\n        setXpositionMouse(event.nativeEvent.offsetX);\r\n        setYpositionMouse(event.nativeEvent.offsetY);\r\n    };\r\n\r\n    const onClick = () => {\r\n        if(disableCanvas){\r\n            let data = refConvas.current.getSaveData();\r\n            let dataParse = JSON.parse(data)\r\n            getDescriptionPointColor(dataParse.lines, XpositionMouse, YpositionMouse)}\r\n    };\r\n\r\n    const getDescriptionPointColor = (arr, x, y) => {\r\n        console.log('arr',arr);\r\n        arr.forEach((i,index) => {\r\n            let isIf = false\r\n            i.points.forEach(c => {\r\n                let isX = Math.abs(x - Math.round(c.x)) < 15\r\n                let isY = Math.abs(y - Math.round(c.y)) < 15\r\n                if(isY === true && isX === true && !isIf){\r\n                    isIf= true\r\n                    let num = 0\r\n                    let arrSelectedColors = []\r\n                    arr.forEach((d, indexD) => {\r\n                        if(d.brushColor === i.brushColor) {\r\n                            num += 1\r\n                            arrSelectedColors.push({num, index: indexD})\r\n                        }\r\n                    })\r\n                    let findEl = arrSelectedColors.find(f => f.index === index)\r\n                    console.log('descriptions',descriptionsCanvas);\r\n                    console.log('imgName + i.brushColor + findEl.num',imgName + i.brushColor + findEl.num);\r\n                    setDescriptionInputValue(descriptionsCanvas[imgName + i.brushColor + findEl.num])\r\n                    setCanvasColor(i.brushColor)\r\n                }else{\r\n                    // setDescriptionInputValue(null)\r\n                    // setCanvasColor(null)\r\n                }\r\n\r\n            })\r\n        })\r\n    }\r\n\r\n    return { handleMouseMove, onClick };\r\n};\r\n\r\nexport default useMouseMove;\r\n","import { Row } from \"antd\";\r\nimport React, { memo } from \"react\";\r\nimport CanvasDraw from \"react-canvas-draw\";\r\nimport { useGlobalContext } from \"../../../../../context/context\";\r\nimport ErrorBoundary from \"../../../../../ErrorBoundary\";\r\nimport { useCanvasContext } from \"../context\";\r\nimport useMouseMove from \"../hooks/useMouseMove\";\r\n\r\nconst CanvasImages = (props) => {\r\n    const { refConvas, imgSrc, imgName, canvasWidth=400, canvasHeight=400 } = props;\r\n\r\n    const { disableCanvas, canvasColor, setDescriptionInputValue, brushRadius } =\r\n        useCanvasContext();\r\n\r\n    const { savedDrawingCanvas } = useGlobalContext();\r\n\r\n    const { handleMouseMove, onClick } = useMouseMove({ refConvas, imgName });\r\n\r\n    const onChangeCanvas = (e) => {\r\n        setDescriptionInputValue(\"\");\r\n    };\r\n\r\n    return (\r\n        <ErrorBoundary>\r\n            <Row>\r\n                <div\r\n                    className=\"CanvasDraw\"\r\n                    onMouseMove={handleMouseMove}\r\n                    onClick={onClick}\r\n                >\r\n                    <CanvasDraw\r\n                        style={{ border: \"1px solid rgb(24, 23, 23)\" }}\r\n                        onChange={(e) => onChangeCanvas(e)}\r\n                        disabled={disableCanvas}\r\n                        canvasWidth={canvasWidth}\r\n                        canvasHeight={canvasHeight}\r\n                        ref={refConvas}\r\n                        brushColor={canvasColor}\r\n                        brushRadius={brushRadius}\r\n                        imgSrc={imgSrc}\r\n                        saveData={\r\n                            savedDrawingCanvas && savedDrawingCanvas[imgName]\r\n                                ? savedDrawingCanvas[imgName]\r\n                                : \"\"\r\n                        }\r\n                    />\r\n                </div>\r\n            </Row>\r\n        </ErrorBoundary>\r\n    );\r\n};\r\n\r\nexport default memo(CanvasImages);\r\n","import React, { memo, useRef } from \"react\";\r\nimport CanvasDesctiptions from \"./canvasComponents/CanvasDesctiptions\";\r\nimport CanvasHeader from \"./canvasComponents/CanvasHeader\";\r\nimport CanvasImages from \"./canvasComponents/CanvasImages\";\r\n\r\nconst CanvasElement = (props) => {\r\n  const { img, imgName } = props;\r\n\r\n  const refConvas = useRef(null);\r\n\r\n  return (\r\n    <>\r\n      <CanvasHeader refConvas={refConvas} imgName={imgName} />\r\n      <CanvasImages\r\n        refConvas={refConvas}\r\n        imgSrc={img}\r\n        imgName={imgName}\r\n        {...props}\r\n      />\r\n      <CanvasDesctiptions refConvas={refConvas} imgName={imgName} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(CanvasElement);\r\n","import React, { useEffect } from \"react\";\r\nimport { useProfileContext } from \"../../../../pages/Profile/context\";\r\nimport CanvasElement from \"./CanvasElement\";\r\nimport { useCanvasContext } from \"./context\";\r\n\r\nconst CanvasComponent = (props) => {\r\n  const { canvasNumber, images } = props;\r\n  const { activeKey } = useProfileContext();\r\n  const { convasImagesArrIndex, setImagesLength } = useCanvasContext();\r\n\r\n  useEffect(() => {\r\n    setImagesLength(images.length);\r\n  }, [images]);\r\n\r\n  if (activeKey !== \"2\") {\r\n    return \"\";\r\n  }\r\n  const getImgName = (img) => {\r\n    return img.split(\"/\")[3].toString().split(\".\")[0];\r\n  };\r\n  return (\r\n    <div className=\"convas\">\r\n      {images.map((img, index) => {\r\n        const imgName = getImgName(img);\r\n        if (index === convasImagesArrIndex) {\r\n          return (\r\n            <CanvasElement\r\n              key={index.toString()}\r\n              img={img}\r\n              imgName={imgName}\r\n              {...props}\r\n            />\r\n          );\r\n        }\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CanvasComponent;\r\n","import React from \"react\";\r\nimport CanvasComponent from \"./CanvasComponent\";\r\nimport { CanvasProvider } from \"./context\";\r\n\r\nconst Index = (props) => {\r\n    return (\r\n        <>\r\n            <CanvasProvider>\r\n                <CanvasComponent {...props} />\r\n            </CanvasProvider>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Index;\r\n","\r\nimport deseaseImage1Data from \"../../../../images/deseaseImage1Data.png\";\r\nimport deseaseImage2Data from \"../../../../images/deseaseImage2Data.jpg\";\r\nimport deseaseImage3Data from \"../../../../images/deseaseImage3Data.png\";\r\nimport deseaseImage4Data from \"../../../../images/deseaseImage4Data.jpg\";\r\nimport deseaseImage5Data from \"../../../../images/deseaseImage5Data.jpg\";\r\n\r\nexport const imagesCanvas1 = [deseaseImage1Data]\r\nexport const imagesCanvas2 = [deseaseImage3Data, deseaseImage4Data]\r\nexport const imagesCanvas3 = [deseaseImage5Data]","import { Col, Row } from \"antd\";\r\nimport React from \"react\";\r\n\r\nimport Canvas from \"./Canvas\";\r\nimport {\r\n  imagesCanvas1,\r\n  imagesCanvas2,\r\n  imagesCanvas3,\r\n} from \"./Canvas/canvasData\";\r\n\r\nconst Canvases = (props) => {\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col xs={24} xl={12}>\r\n          <Canvas images={imagesCanvas1} canvasNumber={1} />\r\n          <Canvas\r\n            images={imagesCanvas3}\r\n            canvasNumber={3}\r\n          />\r\n        </Col>\r\n        <Col xs={24} xl={12}>\r\n          <Canvas\r\n            canvasWidth={600}\r\n            canvasHeight={600}\r\n            images={imagesCanvas2}\r\n            canvasNumber={2}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Canvases;\r\n","import { Table } from \"antd\";\r\nimport React, { memo, useMemo } from \"react\";\r\nimport { useGlobalContext } from \"../../../context/context\";\r\nimport DeleteTableRow from \"../../DeleteTableRow\";\r\nimport { useMorbyContext } from \"../context\";\r\n\r\nconst MorbyTable = () => {\r\n    const { setSelectedRowTable, activeRow, setActiveRow } = useMorbyContext();\r\n    const { deseaseHistoryDynamicsList, setDeseaseHistoryDynamicsList } =\r\n        useGlobalContext();\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Breast\",\r\n                dataIndex: \"complaintBreastType\",\r\n                key: \"complaintBreastType\",\r\n            },\r\n            {\r\n                title: \"Duration of illness\",\r\n                dataIndex: \"durationOfIllness\",\r\n                key: \"durationOfIllness\",\r\n            },\r\n            {\r\n                title: \"Complaints\",\r\n                dataIndex: \"complaintDescription\",\r\n                key: \"complaintDescription\",\r\n            },\r\n            {\r\n                title: \"ER\",\r\n                dataIndex: \"ihkEr\",\r\n                key: \"ihkEr\",\r\n                render: (value) => {\r\n                    if (value === 1) {\r\n                        return \"Pozitiv\";\r\n                    } else if (value === 2) {\r\n                        return \"Negativ\";\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"ER N\",\r\n                dataIndex: \"erN\",\r\n                key: \"erN\",\r\n            },\r\n            {\r\n                title: \"PR\",\r\n                dataIndex: \"ihkPr\",\r\n                key: \"ihkPr\",\r\n                render: (value) => {\r\n                    if (value === 1) {\r\n                        return \"Pozitiv\";\r\n                    } else if (value === 2) {\r\n                        return \"Negativ\";\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"PR N\",\r\n                dataIndex: \"prN\",\r\n                key: \"prN\",\r\n            },\r\n            {\r\n                title: \"HER2\",\r\n                dataIndex: \"her2\",\r\n                key: \"her2\",\r\n            },\r\n            {\r\n                title: \"HER2 FT\",\r\n                dataIndex: \"her2FT\",\r\n                key: \"her2FT\",\r\n            },\r\n            {\r\n                title: \"K67\",\r\n                dataIndex: \"k67\",\r\n                key: \"k67\",\r\n            },\r\n            {\r\n                title: \"\",\r\n                dataIndex: \"delete\",\r\n                key: \"delete\",\r\n                width: \"20px\",\r\n                render: (value, row, index) => {\r\n                    return (\r\n                        <DeleteTableRow\r\n                            row={row}\r\n                            dataSource={deseaseHistoryDynamicsList}\r\n                            setDataSource={setDeseaseHistoryDynamicsList}\r\n                        />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [deseaseHistoryDynamicsList]);\r\n\r\n    const onClickRow = (r) => {\r\n        if(!r.key){\r\n            r.Id = new Date().getTime();\r\n            r.key = r.Id\r\n        }\r\n        setSelectedRowTable(r);\r\n        setActiveRow(r.key);\r\n    };\r\n    return (\r\n        <>\r\n            <Table\r\n                rowClassName={(record, index) =>\r\n                    record.key === activeRow && \"rowClassName_active\"\r\n                }\r\n                locale={{ emptyText: \"Sənəd boşdur\" }}\r\n                className=\"my_table\"\r\n                columns={columns}\r\n                dataSource={deseaseHistoryDynamicsList}\r\n                onRow={(r) => ({\r\n                    onClick: (e) => onClickRow(r),\r\n                })}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default memo(MorbyTable);\r\n","import React from 'react';\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { useMorbyContext } from '../context';\r\n\r\nconst Buttons = () => {\r\n    const { setIsReset, setIsAdd, setIsEdit, activeRow } = useMorbyContext();\r\n\r\n    const handleAdd = () => {\r\n        setIsAdd(true);\r\n    };\r\n    const reset = () => {\r\n        setIsReset(true);\r\n    };\r\n    const handleEdit = () => {\r\n        setIsEdit(true);\r\n    };\r\n    const addButton = (\r\n        <button\r\n            onClick={handleAdd}\r\n            style={{ color: \"green\" }}\r\n            className=\"new_button\"\r\n        >\r\n            Add\r\n        </button>\r\n    );\r\n    const editButton = (\r\n        <button\r\n            onClick={handleEdit}\r\n            className=\"new_button rowClassName_active\"\r\n        >\r\n            Edit\r\n        </button>\r\n    );\r\n    return (\r\n        <div className=\"visit_footer_buttons\">\r\n            {!activeRow && (\r\n                <button\r\n                    onClick={reset}\r\n                    style={{ color: \"red\" }}\r\n                    className=\"new_button\"\r\n                >\r\n                    <DeleteOutlined />\r\n                    Clear\r\n                </button>\r\n            )}\r\n            {activeRow ? editButton : addButton}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import React from \"react\";\r\n\r\nfunction Divider() {\r\n  return (\r\n    <div\r\n      style={{\r\n        margin: \"20px -20px\",\r\n        height: \"20px\",\r\n        backgroundColor: \"#f0f2f5\",\r\n        // boxShadow: 'inset 0px 10px 20px 2px rgba(0, 0, 0, 0.05)',\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Divider;\r\n","import React from \"react\";\r\nimport HeaderMorby from \"./components/HeaderMorby\";\r\nimport MorbyContent from \"./components/MorbyContent\";\r\nimport { MorbyProvider } from \"./context\";\r\nimport Canvases from \"./components/Canvases\";\r\nimport MorbyTable from \"./components/MorbyTable\";\r\nimport Buttons from \"./components/Buttons\";\r\nimport Divider from \"../Divider\";\r\n\r\nconst index = () => {\r\n  return (\r\n    <MorbyProvider>\r\n      <MorbyContent />\r\n      <Buttons />\r\n      <MorbyTable />\r\n      <Divider />\r\n      <HeaderMorby />\r\n      <Divider />\r\n      <Canvases />\r\n    </MorbyProvider>\r\n  );\r\n};\r\n\r\nexport default index;\r\n","import { Affix, Form, Input } from \"antd\";\r\nimport React from \"react\";\r\nimport { useGlobalContext } from \"../context/context\";\r\nimport { useHandleSavePotient } from \"../hooks\";\r\nimport useResetForm from \"../hooks/useResetForm\";\r\nimport useClearPatientFormhomeValues from \"../pages/Home/hooks/useClearPatientFormhomeValues\";\r\n\r\nconst Potient = () => {\r\n    const [form] = Form.useForm();\r\n  const { formValues, setFormValues } = useGlobalContext();\r\n  const { handleSavePotient } = useHandleSavePotient();\r\n  const onFieldsChange = ([{ name, value }]) => {\r\n    formValues.Potient = { ...formValues.Potient, [name]: value };\r\n    setFormValues(formValues);\r\n  };\r\n  const handleSave = async () => {\r\n    handleSavePotient();\r\n  };\r\n\r\n  const { clearPatient } = useClearPatientFormhomeValues();\r\n  const handleClear = () => {\r\n    clearPatient();\r\n  };\r\n\r\n  useResetForm({ form });\r\n\r\n  return (\r\n    <>\r\n      <Affix className=\"affixProfile\" offsetTop={\"0\"}>\r\n        <div>\r\n          <Form\r\n            form={form}\r\n            onFieldsChange={onFieldsChange}\r\n            layout=\"inline\"\r\n            className=\"collapsForm\"\r\n            initialValues={formValues.Potient}\r\n          >\r\n            <Form.Item label=\"Patient №\" name=\"patientId\">\r\n              <Input readOnly disabled style={{ width: \"100px\" }} />\r\n            </Form.Item>\r\n            <Form.Item label=\"Name\" name=\"patientName\">\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item label=\"Surname\" name=\"patientSurName\">\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item label=\"Patronymic\" name=\"patientPatronymic\">\r\n              <Input />\r\n            </Form.Item>\r\n            <button onClick={handleSave} className=\"new_button\">\r\n              Save\r\n            </button>\r\n            <button onClick={handleClear} className=\"new_button_clear\">\r\n              Clear\r\n            </button>\r\n          </Form>\r\n        </div>\r\n      </Affix>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Potient;\r\n","import { message } from \"antd\";\r\nimport sendRequest from \"../api/sendRequest\";\r\nimport { useGlobalContext } from \"../context/context\";\r\n\r\nexport function useHandleSavePotient() {\r\n\tconst {\r\n\t\tformValues,\r\n\t\tanalizFileList,\r\n\t\tdataFamily,\r\n\t\tlistRecipe,\r\n\t\trecipeList,\r\n\t\tsavedDrawingCanvas,\r\n\t\tdescriptionsCanvas,\r\n\t\tdeseaseHistoryDynamicsList,\r\n\t} = useGlobalContext();\r\n\r\n\tconst messageOnSave = (res, nameFunc) => {\r\n\t\tif (res && typeof res !== \"string\") {\r\n\t\t\tmessage.success({\r\n\t\t\t\tcontent: nameFunc + \" saved\",\r\n\t\t\t\tkey: nameFunc + \"_save\",\r\n\t\t\t\tduration: 2,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tmessage.error({\r\n\t\t\t\tcontent: nameFunc + \" don't saved\",\r\n\t\t\t\tkey: nameFunc + \"_save\",\r\n\t\t\t\tduration: 2,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tconst putAncet = async (obj) => {\r\n\t\tlet res = await sendRequest(\"vite\", obj, \"post\");\r\n\t\tmessageOnSave(res, \"Vite\");\r\n\t};\r\n\tconst putMorbi = async (obj) => {\r\n\t\tlet familyMembersList = [];\r\n\t\tdataFamily.forEach((i, index) => {\r\n\t\t\tlet familyMember = Object.keys(i)[0];\r\n\t\t\tfamilyMembersList.push({\r\n\t\t\t\tfamilyMember: familyMember,\r\n\t\t\t\tfamilyMemberInjury: i[familyMember].trauma,\r\n\t\t\t\tfamilyMemberDied: i[familyMember].dead,\r\n\t\t\t\tfamilyMemberCurrentCancer: i[familyMember].alive,\r\n\t\t\t\tfamilyMemberDesc: i[familyMember].description,\r\n\t\t\t});\r\n\t\t});\r\n\t\tobj.familyMembersList = familyMembersList;\r\n\t\tsavedDrawingCanvas.deseaseImageDesc =\r\n\t\t\tJSON.stringify(descriptionsCanvas);\r\n\t\tobj.deseaseImagesList = savedDrawingCanvas;\r\n\t\tobj.deseaseHistoryDynamicsList = deseaseHistoryDynamicsList;\r\n\r\n\t\tlet res = await sendRequest(\"morby\", obj, \"post\");\r\n\t\tmessageOnSave(res, \"Morby\");\r\n\t};\r\n\tconst putVizit = async (obj) => {\r\n\t\tlet res = await sendRequest(\"visits\", obj, \"post\");\r\n\t\tmessageOnSave(res, \"Visits\");\r\n\t};\r\n\tconst putMualice = async (obj) => {\r\n\t\tlet res = await sendRequest(\"treatment\", obj, \"post\");\r\n\t\tmessageOnSave(res, \"Treatment\");\r\n\t};\r\n\tconst putAnalyzis = async (obj) => {\r\n\t\tlet res = await sendRequest(\"analyses\", obj, \"post\");\r\n\t\tmessageOnSave(res, \"Analyses\");\r\n\t};\r\n\tconst fetchPatientid = async () => {\r\n\t\ttry {\r\n\t\t\tlet res = await sendRequest(\"patientid\", {}, \"get\");\r\n\t\t\treturn res.data;\r\n\t\t} catch (e) {\r\n\t\t\tmessage.error({\r\n\t\t\t\tcontent: e,\r\n\t\t\t\tkey: \"doc_save\",\r\n\t\t\t\tduration: 2,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleSavePotient = async () => {\r\n\t\tmessage.loading({ content: \"Loading...\", key: \"doc_save\" });\r\n\r\n\t\tlet id = formValues.Potient.patientId;\r\n\t\tlet patientId;\r\n\t\tif (id) {\r\n\t\t\tpatientId = id;\r\n\t\t} else {\r\n\t\t\tpatientId = await fetchPatientid();\r\n\t\t}\r\n\t\tif (patientId) {\r\n\t\t\tif (Object.keys(formValues.Anket).length) {\r\n\t\t\t\tconst {\r\n\t\t\t\t\tpatientName,\r\n\t\t\t\t\tpatientSurName,\r\n\t\t\t\t\tpatientPatronymic,\r\n\t\t\t\t\tpatientId,\r\n\t\t\t\t} = formValues.Potient;\r\n\t\t\t\tconst sendObj = {\r\n\t\t\t\t\t...formValues.Anket,\r\n\t\t\t\t\tpatientName,\r\n\t\t\t\t\tpatientSurName,\r\n\t\t\t\t\tpatientPatronymic,\r\n\t\t\t\t\tpatientId,\r\n\t\t\t\t};\r\n\t\t\t\tputAncet(sendObj);\r\n\t\t\t}\r\n\t\t\tif (Object.keys(formValues.Analiz).length) {\r\n\t\t\t\tconst sendObj = {\r\n\t\t\t\t\t...formValues.Analiz,\r\n\t\t\t\t\tpatientId,\r\n\t\t\t\t\tanalizFileList,\r\n\t\t\t\t};\r\n\t\t\t\tputAnalyzis(sendObj);\r\n\t\t\t}\r\n\t\t\tif (Object.keys(formValues.Morbi).length) {\r\n\t\t\t\tconst sendObj = { ...formValues.Morbi, patientId };\r\n\t\t\t\tputMorbi(sendObj);\r\n\t\t\t}\r\n\t\t\tif (Object.keys(formValues.Vizit).length) {\r\n\t\t\t\tconst sendObj = { ...formValues.Vizit, patientId };\r\n\t\t\t\tputVizit(sendObj);\r\n\t\t\t}\r\n\t\t\tif (Object.keys(formValues.treatmentRB).length) {\r\n\t\t\t\tconst sendObj = {\r\n\t\t\t\t\t// treatmentRB: {\r\n\t\t\t\t\t...formValues.treatmentRB,\r\n\t\t\t\t\tpatientId,\r\n\t\t\t\t\ttreatmentDynamics: recipeList,\r\n\t\t\t\t\trecipeList: listRecipe,\r\n\t\t\t\t\t// },\r\n\t\t\t\t};\r\n\t\t\t\tputMualice(sendObj);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\treturn { handleSavePotient };\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Col, Form, Input, Row } from \"antd\";\r\nimport { Checkbox } from \"antd\";\r\nimport { Rate } from \"antd\";\r\nimport { DatePicker, Select, InputNumber } from \"antd\";\r\nimport { useGlobalContext } from \"../context/context\";\r\nimport moment from \"moment\";\r\nimport { styleInput } from \"../date/styleInput\";\r\nimport useResetForm from \"../hooks/useResetForm\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst Anket = (props) => {\r\n  const [form] = Form.useForm();\r\n  const { formValues, setFormValues } = useGlobalContext();\r\n  const [gender, setgender] = useState(\"Qadın\");\r\n  const OPTIONS = [\"0-6\", \"6-12\", \"12-24\", \"24+\"];\r\n\r\n  const onFieldsChange = ([{ name, value }]) => {\r\n    if (name[0] === \"birthDate\") {\r\n      formValues.Anket = {\r\n        ...formValues.Anket,\r\n        [name]: moment(value).format(\"YYYY-MM-DD\"),\r\n      };\r\n      setFormValues(formValues);\r\n    } else if (name[0] === \"alkogol\" || name[0] === \"smoke\") {\r\n      if (value) value = 1;\r\n      else {\r\n        value = 0;\r\n      }\r\n      formValues.Anket = { ...formValues.Anket, [name]: value };\r\n      setFormValues(formValues);\r\n    } else {\r\n      formValues.Anket = { ...formValues.Anket, [name]: value };\r\n      setFormValues(formValues);\r\n    }\r\n  };\r\n  const onChangeSelectGender = (e) => {\r\n    setgender(e);\r\n  };\r\n  useEffect(() => {\r\n    if (formValues?.Anket) {\r\n      formValues.Anket = { ...formValues.Anket, gender: \"Gadın\" };\r\n      setFormValues(formValues);\r\n    }\r\n  }, []);\r\n\r\n  useResetForm({ form });\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col xs={24} xl={12}>\r\n          <Form\r\n            form={form}\r\n            initialValues={formValues.Anket}\r\n            className=\"first\"\r\n            onFieldsChange={onFieldsChange}\r\n            labelAlign=\"right\"\r\n            labelCol={{\r\n              span: 6,\r\n            }}\r\n            wrapperCol={{\r\n              span: 13,\r\n            }}\r\n          >\r\n            <Form.Item label=\"Birth date\" name=\"birthDate\">\r\n              <DatePicker style={styleInput} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Birth place\" name=\"birthPlace\">\r\n              <Input style={styleInput} />\r\n            </Form.Item>\r\n            <Form.Item name=\"phoneNumber\" label=\"Phone Number\">\r\n              <Input style={styleInput} />\r\n              {/* <Input style={{ width: \"100%\" }} /> */}\r\n            </Form.Item>\r\n            <Form.Item label=\"Sex\" name=\"gender\">\r\n              <Select\r\n                style={styleInput}\r\n                allowClear\r\n                onChange={onChangeSelectGender}\r\n                defaultValue=\"Qadın\"\r\n              >\r\n                <Option value=\"Qadın\">Female</Option>\r\n                <Option value=\"Kişi\">Male</Option>\r\n              </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Marital status\" name=\"maritalStatus\">\r\n              <Select allowClear style={styleInput}>\r\n                <Option value=\"Subay\">Single</Option>\r\n                <Option value=\"Evli\">Married</Option>\r\n                <Option value=\"Boşanmış\">Divorced</Option>\r\n              </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Sex status\" name=\"sexStatus\">\r\n              <Select allowClear style={styleInput}>\r\n                <Option value=\"Regular\">Regular</Option>\r\n                <Option value=\"Geyri regular\">Irregular</Option>\r\n              </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item valuePropName=\"checked\" label=\"Alcohol\" name=\"alkogol\">\r\n              <Checkbox />\r\n            </Form.Item>\r\n\r\n            <Form.Item valuePropName=\"checked\" label=\"Smoking \" name=\"smoke\">\r\n              <Checkbox />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Recom. person\" name=\"recommendationPerson\">\r\n              <Input allowClear style={styleInput} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Raiting\" name=\"raiting\">\r\n              <Rate style={{ backgroundColor: \"white\" }} />\r\n            </Form.Item>\r\n          </Form>\r\n        </Col>\r\n        <Col xs={24} xl={12}>\r\n          {gender === \"Qadın\" && (\r\n            <>\r\n              <Form\r\n                form={form}\r\n                className=\"second\"\r\n                onFieldsChange={onFieldsChange}\r\n                labelAlign=\"right\"\r\n                labelCol={{\r\n                  span: 8,\r\n                }}\r\n                wrapperCol={{\r\n                  span: 13,\r\n                }}\r\n                initialValues={formValues.Anket}\r\n              >\r\n                <Form.Item\r\n                  label=\"A cure for infertility\"\r\n                  name=\"cureForInfertility\"\r\n                >\r\n                  <Input style={styleInput} />\r\n                </Form.Item>\r\n                <Form.Item label=\"Menopause\" name=\"menopause\">\r\n                  <Input style={styleInput} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Menarche\" name=\"menarxe\">\r\n                  <Input style={styleInput} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                  label=\"Age of first childbirth\"\r\n                  name=\"firstChildbirth\"\r\n                >\r\n                  <InputNumber\r\n                    style={styleInput}\r\n                    min={10}\r\n                    max={60}\r\n                    defaultValue={0}\r\n                  />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Age of last childbirth\" name=\"lastChildbirth\">\r\n                  <InputNumber\r\n                    style={styleInput}\r\n                    min={10}\r\n                    max={60}\r\n                    defaultValue={0}\r\n                  />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Number of abortions\" name=\"abortCount\">\r\n                  <InputNumber style={styleInput} min={0} defaultValue={0} />\r\n                </Form.Item>\r\n                <Form.Item label=\"Breastfeeding period\" name=\"lactationPeriod\">\r\n                  <Select allowClear style={styleInput}>\r\n                    {OPTIONS.map((option) => (\r\n                      <Select.Option key={option} value={option}>\r\n                        {option}\r\n                      </Select.Option>\r\n                    ))}\r\n                  </Select>\r\n                </Form.Item>\r\n                <Form.Item\r\n                  label=\"Number of artificial inseminations\"\r\n                  name=\"artificialInseminationCount\"\r\n                >\r\n                  <InputNumber style={styleInput} min={0} defaultValue={0} />\r\n                </Form.Item>\r\n\r\n                {/* <Form.Item\r\n                                    label=\"Medications taken\"\r\n                                    name=\"cureTab\"\r\n                                >\r\n                                    <TextArea style={styleInput} rows={3} />\r\n                                </Form.Item> */}\r\n              </Form>\r\n            </>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Form\r\n          form={form}\r\n          style={{ marginLeft: \"9.5%\" }}\r\n          labelAlign=\"right\"\r\n          layout=\"inline\"\r\n          onFieldsChange={onFieldsChange}\r\n          initialValues={formValues.Anket}\r\n        >\r\n          <Form.Item label=\"Height\" name=\"height\">\r\n            <InputNumber min={0} defaultValue={0} />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Weight\" name=\"weight\">\r\n            <InputNumber min={0} defaultValue={0} />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"IMT\" name=\"imt\">\r\n            <InputNumber min={0} defaultValue={0} />\r\n          </Form.Item>\r\n        </Form>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\nexport default Anket;\r\n","import moment from \"moment\";\r\nimport React, { memo, useEffect, useMemo, useState } from \"react\";\r\nimport { useGlobalContext } from \"../../../context/context\";\r\nimport DeleteTableRow from \"../../DeleteTableRow\";\r\nimport EditTableComponent from \"../../EditTableComponent\";\r\n\r\nfunction TabsTableMualice() {\r\n    const [count, setCount] = useState(0);\r\n\r\n    const { isChangeTable, setIsChangeTable, listRecipe, setListRecipe } =\r\n        useGlobalContext();\r\n\r\n\r\n    useEffect(() => {\r\n        if (isChangeTable) {\r\n            setIsChangeTable(false);\r\n        }\r\n    }, [isChangeTable]);\r\n    const onClickNewBundle = () => {\r\n        let key = count;\r\n        let newData = { key, date: moment().format(\"DD-MM-YYYY\") };\r\n        setListRecipe([...listRecipe, newData]);\r\n        setCount(count + 1);\r\n    };\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Date\",\r\n                dataIndex: \"date\",\r\n                key: \"date\",\r\n                editable: true,\r\n                width: \"200px\",\r\n            },\r\n            {\r\n                title: \"Name\",\r\n                dataIndex: \"cureTabName\",\r\n                key: \"cureTabName\",\r\n                inputType:'select',\r\n                editable: true,\r\n                width: \"200px\",\r\n            },\r\n            {\r\n                title: \"Type\",\r\n                dataIndex: \"cureTabType\",\r\n                inputType:'select',\r\n                editable: true,\r\n                width: \"200px\",\r\n                render: (value, row, index) => {\r\n                    if (!value && row.Type) {\r\n                        return row.Type;\r\n                    } else return value;\r\n                },\r\n            },\r\n            {\r\n                title: \"Mg/Ml\",\r\n                dataIndex: \"cureTabDose\",\r\n                key: \"cureTabDose\",\r\n                editable: true,\r\n                width: \"200px\",\r\n            },\r\n            {\r\n                title: \"Usage guide\",\r\n                dataIndex: \"cureTabUsing\",\r\n                key: \"cureTabUsing\",\r\n                editable: true,\r\n                width: \"200px\",\r\n            },\r\n            {\r\n                title: \"\",\r\n                dataIndex: \"delete\",\r\n                key: \"delete\",\r\n                width: \"20px\",\r\n                render: (value, row, index) => {\r\n                    return (\r\n                        <DeleteTableRow\r\n                            row={row}\r\n                            dataSource={listRecipe}\r\n                            setDataSource={setListRecipe}\r\n                        />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [listRecipe.length, isChangeTable]);\r\n    return (\r\n        <div className=\"managers-table my_table\">\r\n            <h2 className=\"tablets_table_header\">Medications</h2>\r\n            <EditTableComponent\r\n                dataSource={listRecipe}\r\n                setDataSource={setListRecipe}\r\n                defaultColumns={columns}\r\n            />\r\n            <button\r\n                type=\"button\"\r\n                className=\"new-button w-100\"\r\n                onClick={onClickNewBundle}\r\n            >\r\n                + New medications\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(TabsTableMualice);\r\n","import React, { useState, createContext, useContext } from \"react\";\r\n\r\nconst MualiceContext = createContext();\r\n\r\nexport const MualiceProvider = ({ children }) => {\r\n    const [isAdd, setIsAdd] = useState(false);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [dataSource, setdataSource] = useState([]);\r\n    const [isReset, setIsReset] = useState(false);\r\n    const [treatmentsType, settreatmentsType] = useState();\r\n    const [selectedRowTable, setSelectedRowTable] = useState()\r\n    const [activeRow, setActiveRow] = useState();\r\n    const [SLNB, setSLNB] = useState();\r\n    const [axilla, setAxilla] = useState();\r\n    const [ihkEr, setihkEr] = useState();\r\n    const [ihkPr, setihkPr] = useState();\r\n    const [ihkHer2, setihkHer2] = useState();\r\n\r\n    const values = {\r\n        ihkEr, setihkEr,\r\n        ihkPr, setihkPr,\r\n        ihkHer2, setihkHer2,\r\n        activeRow, setActiveRow,\r\n        selectedRowTable, setSelectedRowTable,\r\n        isAdd, setIsAdd,\r\n        isEdit, setIsEdit,\r\n        isReset, setIsReset,\r\n        dataSource, setdataSource,\r\n        treatmentsType, settreatmentsType,\r\n        SLNB, setSLNB,\r\n        axilla, setAxilla,\r\n    }\r\n    return (\r\n        <MualiceContext.Provider value={values}>\r\n            {children}\r\n        </MualiceContext.Provider>\r\n    );\r\n}\r\n\r\nexport const useMualiceContext = () => useContext(MualiceContext);","import { Col, Form, Input, Row } from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport React, { memo } from \"react\";\r\nimport { useGlobalContext } from \"../../context/context\";\r\nimport { styleInput } from \"../../date/styleInput\";\r\nimport useResetForm from \"../../hooks/useResetForm\";\r\n\r\nconst HeaderMualice = () => {\r\n  const [form] = Form.useForm();\r\n  const { formValues, setFormValues } = useGlobalContext();\r\n\r\n  const onFieldsChange = ([{ name, value }]) => {\r\n    formValues.treatmentRB = { ...formValues.treatmentRB, [name]: value };\r\n    setFormValues(formValues);\r\n  };\r\n\r\n  useResetForm({ form });\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col xs={24} xl={12}>\r\n          <Form\r\n            form={form}\r\n            initialValues={formValues.treatmentRB}\r\n            onFieldsChange={onFieldsChange}\r\n            className=\"collapsForm\"\r\n            labelAlign=\"right\"\r\n            labelCol={{\r\n              span: 5,\r\n            }}\r\n            wrapperCol={{\r\n              span: 13,\r\n            }}\r\n          >\r\n            <Form.Item label=\"Pre menopause\" name=\"preMenapause\">\r\n              <Input style={styleInput} />\r\n            </Form.Item>\r\n            <Form.Item label=\"Description\" name=\"treatmentDesc\">\r\n              <TextArea style={styleInput} rows={3} />\r\n            </Form.Item>\r\n          </Form>\r\n        </Col>\r\n        <Col xs={24} xl={12}>\r\n          <Form\r\n            form={form}\r\n            initialValues={formValues.treatmentRB}\r\n            onFieldsChange={onFieldsChange}\r\n            className=\"collapsForm\"\r\n            labelAlign=\"right\"\r\n            labelCol={{\r\n              span: 5,\r\n            }}\r\n            wrapperCol={{\r\n              span: 13,\r\n            }}\r\n          >\r\n            <Form.Item label=\"Menopause\" name=\"menapause\">\r\n              <Input style={styleInput} />\r\n            </Form.Item>\r\n            <Form.Item label=\"Recommendation\" name=\"recommendation\">\r\n              <TextArea style={styleInput} />\r\n            </Form.Item>\r\n            <Form.Item label=\"Advise\" name=\"advise\">\r\n              <TextArea style={styleInput} />\r\n            </Form.Item>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(HeaderMualice);\r\n","import React from \"react\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { useMualiceContext } from \"../context\";\r\n\r\nconst Buttons = () => {\r\n    const { setIsReset, setIsAdd, setIsEdit, activeRow } = useMualiceContext();\r\n\r\n    const handleAdd = () => {\r\n        setIsAdd(true);\r\n    };\r\n    const reset = () => {\r\n        setIsReset(true);\r\n    };\r\n    const handleEdit = () => {\r\n        setIsEdit(true);\r\n    };\r\n    const addButton = (\r\n        <button\r\n            onClick={handleAdd}\r\n            style={{ color: \"green\" }}\r\n            className=\"new_button\"\r\n        >\r\n            Add\r\n        </button>\r\n    );\r\n    const editButton = (\r\n        <button\r\n            onClick={handleEdit}\r\n            className=\"new_button rowClassName_active\"\r\n        >\r\n            Edit\r\n        </button>\r\n    );\r\n    return (\r\n        <div className=\"visit_footer_buttons\">\r\n            {!activeRow && (\r\n                <button\r\n                    onClick={reset}\r\n                    style={{ color: \"red\" }}\r\n                    className=\"new_button\"\r\n                >\r\n                    <DeleteOutlined />\r\n                    Clear\r\n                </button>\r\n            )}\r\n            {activeRow ? editButton : addButton}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Buttons;\r\n","import moment from 'moment';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { deepCopy } from '../../../functions/deepCopy';\r\nimport { useMualiceContext } from '../context';\r\n\r\nconst useEditRowTable = ({resetForm, form}) => {\r\n    const {\r\n        selectedRowTable,\r\n        setSelectedRowTable,\r\n        settreatmentsType,\r\n        setSLNB,\r\n        setAxilla,\r\n        isEdit, setIsEdit,\r\n        dataSource,\r\n        setdataSource,\r\n        setActiveRow,\r\n    } = useMualiceContext();\r\n\r\n    const [selectedTreatmentId, setselectedTreatmentId] = useState()\r\n\r\n    const selectedTreatmentTypeName = (formObj) => {\r\n        settreatmentsType(formObj.treatmentTypeName)\r\n        setSLNB(formObj.SLNB)\r\n        setAxilla(formObj.axillaDeseksiya)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (selectedRowTable) {\r\n            resetForm();\r\n            let copy = deepCopy(selectedRowTable);\r\n            setselectedTreatmentId(copy.Id)\r\n            copy.treatmentDate = moment(copy.treatmentDate);\r\n            selectedTreatmentTypeName(copy)\r\n            form.setFieldsValue(copy);\r\n            setSelectedRowTable();\r\n        }\r\n    }, [selectedRowTable]);\r\n\r\n    useEffect(() => {\r\n        if (isEdit) {\r\n            let findIndex = dataSource.findIndex(i => i.Id === selectedTreatmentId)\r\n\r\n            let copydataForm = deepCopy(form.getFieldsValue());\r\n            copydataForm.key = selectedTreatmentId\r\n            copydataForm.Id = selectedTreatmentId\r\n            copydataForm.treatmentDate = moment(\r\n                copydataForm.treatmentDate\r\n            ).format(\"YYYY-MM-DD HH:mm\");\r\n\r\n            let copyDataSource = deepCopy(dataSource)\r\n            copyDataSource[findIndex] = copydataForm\r\n            setdataSource(copyDataSource)\r\n            resetForm();\r\n            setIsEdit()\r\n            setActiveRow();\r\n        }\r\n    }, [isEdit]);\r\n\r\n    return {}\r\n};\r\n\r\nexport default useEditRowTable;","import moment from \"moment\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../../../context/context\";\r\nimport { deepCopy } from \"../../../functions/deepCopy\";\r\nimport { useMualiceContext } from \"../context\";\r\nimport useEditRowTable from \"./useEditRowTable\";\r\n\r\nconst useAddAndResetForm = ({ form }) => {\r\n    const {\r\n        isReset,\r\n        setIsReset,\r\n        isAdd,\r\n        setIsAdd,\r\n        dataSource,\r\n        setdataSource,\r\n        settreatmentsType,\r\n        setActiveRow,\r\n        setIsEdit,\r\n        setSLNB,\r\n        setAxilla,\r\n    } = useMualiceContext();\r\n\r\n    const { recipeList, setRecipeList } = useGlobalContext();\r\n\r\n    const resetForm = () => {\r\n        form.setFieldsValue({});\r\n        form.resetFields();\r\n        setSLNB?.();\r\n        setAxilla?.();\r\n        settreatmentsType?.();\r\n        setIsAdd(false);\r\n        setIsReset(false);\r\n        setIsEdit(false);\r\n    };\r\n\r\n    useEditRowTable({ resetForm, form });\r\n\r\n    useEffect(() => {\r\n        if (isAdd) {\r\n            const add = () => {\r\n                let copydataForm = deepCopy(form.getFieldsValue());\r\n                copydataForm.key = new Date().getTime();\r\n                copydataForm.Id = new Date().getTime();\r\n                copydataForm.treatmentDate = moment(\r\n                    copydataForm.treatmentDate\r\n                ).format(\"YYYY-MM-DD HH:mm\");\r\n                setRecipeList([...recipeList, copydataForm]);\r\n                resetForm();\r\n                setActiveRow();\r\n            };\r\n            add();\r\n        }\r\n    }, [isAdd]);\r\n\r\n    useEffect(() => {\r\n        if (isReset) {\r\n            resetForm();\r\n        }\r\n    }, [isReset]);\r\n\r\n    return {};\r\n};\r\n\r\nexport default useAddAndResetForm;\r\n","import { DatePicker, Form, InputNumber, Radio } from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport moment from \"moment\";\r\nimport React, { memo } from \"react\";\r\nimport { styleInput } from \"../../../date/styleInput\";\r\nimport { useMualiceContext } from \"../context\";\r\nimport useLabel from \"../../EditTableComponent/hooks/useLabel\";\r\n\r\nconst LeftForm = ({ form }) => {\r\n    const { treatmentsType, SLNB, setSLNB, axilla, setAxilla, activeRow } =\r\n        useMualiceContext();\r\n\r\n    const label = useLabel({ activeRow });\r\n\r\n    return (\r\n        <>\r\n            <Form\r\n                form={form}\r\n                className=\"collapsForm\"\r\n                labelAlign=\"right\"\r\n                labelWrap={true}\r\n                labelCol={{\r\n                    span: 5,\r\n                }}\r\n                wrapperCol={{\r\n                    span: 13,\r\n                }}\r\n            >\r\n                <Form.Item label={label(\"Date\")} name=\"treatmentDate\">\r\n                    <DatePicker\r\n                        format=\"YYYY-MM-DD HH:mm\"\r\n                        defaultValue={moment()}\r\n                        style={styleInput}\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label={label(\"Urgent Histology\")}\r\n                    name=\"histologyUrgent\"\r\n                >\r\n                    <TextArea style={styleInput} rows={3} />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label={label(\"Histology Final\")}\r\n                    name=\"histologyFinal\"\r\n                >\r\n                    <TextArea style={styleInput} rows={3} />\r\n                </Form.Item>\r\n                {treatmentsType !== \"benigen\" ? (\r\n                    <>\r\n                        <Form.Item label={label(\"SLNB\")} name=\"SLNB\">\r\n                            <Radio.Group\r\n                                onChange={(e) => {\r\n                                    setSLNB(e.target.value);\r\n                                }}\r\n                            >\r\n                                <Radio value={1}>Yes</Radio>\r\n                                <Radio value={2}>No</Radio>\r\n                            </Radio.Group>\r\n                        </Form.Item>\r\n                        {SLNB === 1 && (\r\n                            <>\r\n                                <Form.Item\r\n                                    label={label(\"Reactive\")}\r\n                                    name=\"SLNB_reactive\"\r\n                                >\r\n                                    <InputNumber\r\n                                        style={styleInput}\r\n                                        min={0}\r\n                                        defaultValue={0}\r\n                                    />\r\n                                </Form.Item>\r\n\r\n                                <Form.Item label={label(\"MTS\")} name=\"SLNB_mts\">\r\n                                    <InputNumber\r\n                                        style={styleInput}\r\n                                        min={0}\r\n                                        defaultValue={0}\r\n                                    />\r\n                                </Form.Item>\r\n                            </>\r\n                        )}\r\n                        <Form.Item\r\n                            label={label(\"Axilla dissection\")}\r\n                            name=\"axillaDeseksiya\"\r\n                        >\r\n                            <Radio.Group\r\n                                onChange={(e) => setAxilla(e.target.value)}\r\n                            >\r\n                                <Radio value={1}>Yes</Radio>\r\n                                <Radio value={2}>No</Radio>\r\n                            </Radio.Group>\r\n                        </Form.Item>\r\n                        {axilla === 1 && (\r\n                            <>\r\n                                <Form.Item\r\n                                    label={label(\"Reactive\")}\r\n                                    name=\"axillaDeseksiyaActive\"\r\n                                >\r\n                                    <InputNumber\r\n                                        style={styleInput}\r\n                                        min={0}\r\n                                        defaultValue={0}\r\n                                    />\r\n                                </Form.Item>\r\n\r\n                                <Form.Item\r\n                                    label={label(\"MTS\")}\r\n                                    name=\"axillaDeseksiyaMts\"\r\n                                >\r\n                                    <InputNumber\r\n                                        style={styleInput}\r\n                                        min={0}\r\n                                        defaultValue={0}\r\n                                    />\r\n                                </Form.Item>\r\n                            </>\r\n                        )}\r\n                    </>\r\n                ) : (\r\n                    \"\"\r\n                )}\r\n            </Form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default memo(LeftForm);\r\n","import { Form, Select } from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport React from \"react\";\r\nimport { styleInput } from \"../../../date/styleInput\";\r\nimport useLabel from \"../../EditTableComponent/hooks/useLabel\";\r\nimport { useMualiceContext } from \"../context\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst Benigen = () => {\r\n    const { activeRow } = useMualiceContext();\r\n\r\n    const label = useLabel({ activeRow });\r\n\r\n    return (\r\n        <>\r\n            <Form.Item label={label(\"Alt növ\")} name=\"treatmentSubType\">\r\n                <Select\r\n                    className={activeRow && \"rowClassName_active\"}\r\n                    allowClear\r\n                    style={styleInput}\r\n                >\r\n                    <Option value=\"lumpektamiya\">Lumpectamia</Option>\r\n                    <Option value=\"reduksiya\">Reduction</Option>\r\n                    <Option value=\"mastopeksiya\">Mastopexy</Option>\r\n                    <Option value=\"augumentasiya\">Augmentation</Option>\r\n                    <Option value=\"Extra breast\">Extra breast</Option>\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item label={label(\"Alt alt növ\")} name=\"treatmentSubSubType\">\r\n                <Select\r\n                    className={activeRow && \"rowClassName_active\"}\r\n                    allowClear\r\n                    style={styleInput}\r\n                >\r\n                    <Option value=\"sag\">Right</Option>\r\n                    <Option value=\"sol\">Left</Option>\r\n                    <Option value=\"herikisi\">Both</Option>\r\n                    <Option value=\"sectoral\">Sectoral</Option>\r\n                    <Option value=\"sectoral round block\">\r\n                        Sectoral round block\r\n                    </Option>\r\n                    <Option value=\"expander\">Expander</Option>\r\n                </Select>\r\n            </Form.Item>\r\n            <Form.Item label={label(\"Description\")} name=\"treatmentTypeDesc\">\r\n                <TextArea style={styleInput} rows={3} />\r\n            </Form.Item>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Benigen;\r\n","import { Form, Input, InputNumber, Radio, Select, Space } from \"antd\";\r\nimport React, { memo } from \"react\";\r\nimport { styleInput } from \"../../../date/styleInput\";\r\nimport Benigen from \"../components/Benigen\";\r\nimport { useMualiceContext } from \"../context\";\r\nimport useLabel from \"../../EditTableComponent/hooks/useLabel\";\r\nimport { useGlobalContext } from \"../../../context/context\";\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\n\r\nconst RightForm = ({ form }) => {\r\n  const {\r\n    treatmentsType,\r\n    settreatmentsType,\r\n    activeRow,\r\n    ihkEr,\r\n    setihkEr,\r\n    ihkPr,\r\n    setihkPr,\r\n    ihkHer2,\r\n    setihkHer2,\r\n  } = useMualiceContext();\r\n\r\n  const label = useLabel({ activeRow });\r\n  const { pathologistsList } = useGlobalContext();\r\n\r\n  const onChangeTreatmentTypeName = (e) => {\r\n    settreatmentsType(e);\r\n    form.setFieldsValue({ treatmentSubType: \"\" });\r\n    form.setFieldsValue({ treatmentSubSubType: \"\" });\r\n    form.setFieldsValue({ treatmentTypeDesc: \"\" });\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      form={form}\r\n      className=\"collapsForm\"\r\n      labelAlign=\"right\"\r\n      labelCol={{\r\n        span: 5,\r\n      }}\r\n      wrapperCol={{\r\n        span: 13,\r\n      }}\r\n    >\r\n      <Form.Item label={label(\"ER\")} name=\"ihkEr\">\r\n        <Radio.Group onChange={(e) => setihkEr(e.target.value)}>\r\n          <Space style={styleInput} direction=\"horizontal\">\r\n            <Radio value={1}>Positive</Radio>\r\n            <Radio value={2}>Negative</Radio>\r\n          </Space>\r\n        </Radio.Group>\r\n      </Form.Item>\r\n      {ihkEr === 1 && (\r\n        <Form.Item label={label(\"N\")} name=\"erN\">\r\n          <InputNumber style={styleInput} />\r\n        </Form.Item>\r\n      )}\r\n      <Form.Item label={label(\"PR\")} name=\"ihkPr\">\r\n        <Radio.Group onChange={(e) => setihkPr(e.target.value)}>\r\n          <Space style={styleInput} direction=\"horizontal\">\r\n            <Radio value={1}>Positive</Radio>\r\n            <Radio value={2}>Negative</Radio>\r\n          </Space>\r\n        </Radio.Group>\r\n      </Form.Item>\r\n      {ihkPr === 1 && (\r\n        <Form.Item label={label(\"N\")} name=\"prN\">\r\n          <InputNumber style={styleInput} />\r\n        </Form.Item>\r\n      )}\r\n      <Form.Item label={label(\"HER2\")} name=\"her2\">\r\n        <InputNumber\r\n          style={styleInput}\r\n          value={ihkHer2}\r\n          onChange={(e) => setihkHer2(e)}\r\n          min={0}\r\n          max={3}\r\n          defaultValue={0}\r\n        />\r\n      </Form.Item>\r\n      {ihkHer2 === 2 && (\r\n        <Form.Item label={label(\"FT\")} name=\"her2FT\">\r\n          <Input />\r\n        </Form.Item>\r\n      )}\r\n      <Form.Item label={label(\"K67\")} name=\"k67\">\r\n        <InputNumber style={styleInput} min={0} defaultValue={0} />\r\n      </Form.Item>\r\n\r\n      <Form.Item label=\"Pathologist\" name=\"pathologist\">\r\n            <Select style={styleInput} allowClear>\r\n              {pathologistsList.map((i) => {\r\n                return (\r\n                  <Select.Option value={i.pathologistName}>\r\n                    {i.pathologistName}\r\n                  </Select.Option>\r\n                );\r\n              })}\r\n            </Select>\r\n      </Form.Item>\r\n\r\n      <Form.Item label={label(\"Brest type\")} name=\"breastType\">\r\n        <Select style={styleInput} allowClear>\r\n          <Option value=\"Missing\">Missing</Option>\r\n          <Option value=\"Right\">Right</Option>\r\n          <Option value=\"Left\">Left</Option>\r\n          <Option value=\"Both\">Both</Option>\r\n          <Option value=\"Post mastectomy right\">Post mastectomy right</Option>\r\n          <Option value=\"Post mastectomy left\">Post mastectomy left</Option>\r\n          <Option value=\"Axilla right\">Axilla right</Option>\r\n          <Option value=\"Axilla left\">Axilla left</Option>\r\n          <Option value=\"Extra breast right\">Extra breast right</Option>\r\n          <Option value=\"Extra breast left\">Extra breast left</Option>\r\n          <Option value=\"Both extra breasts\">Both extra breasts</Option>\r\n        </Select>\r\n      </Form.Item>\r\n      <Form.Item label={label(\"Type of treatment\")} name=\"treatmentTypeName\">\r\n        <Select\r\n          allowClear\r\n          style={styleInput}\r\n          onChange={onChangeTreatmentTypeName}\r\n        >\r\n          <Option value=\"benigen\">Benign</Option>\r\n          <Option value=\"maligan\">Malignant</Option>\r\n          <Option value=\"Nak\">Nak</Option>\r\n          <Option value=\"AK\">AK</Option>\r\n          <Option value=\"RT\">RT</Option>\r\n          <Option value=\"target\">Target</Option>\r\n        </Select>\r\n      </Form.Item>\r\n      {treatmentsType === \"maligan\" ? (\r\n        <>\r\n          <Form.Item label={label(\"Emeliyyat novu\")} name=\"treatmentSubType\">\r\n            <Select style={styleInput} allowClear>\r\n              <Option value=\"Organgoruyucu\">Organoprotector</Option>\r\n              <Option value=\"Masektamiya\">Masectomy</Option>\r\n              <Option value=\"SLNB\">SLNB</Option>\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item label={label(\"TB\")} name=\"treatmentSubSubType\">\r\n            <Select style={styleInput} allowClear>\r\n              <Option value=\"lumA\">Lum A</Option>\r\n              <Option value=\"lumB\">Lum B</Option>\r\n              <Option value=\"tripelN\">Triple negative</Option>\r\n              <Option value=\"hormonP\">Hormone positive Her positive</Option>\r\n              <Option value=\"hormonN\">Hormone negative Her positive</Option>\r\n              <Option value=\"prN\">PR negative</Option>\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item label={label(\"Description\")} name=\"treatmentTypeDesc\">\r\n            <TextArea style={styleInput} rows={3} />\r\n          </Form.Item>\r\n        </>\r\n      ) : treatmentsType === \"benigen\" ? (\r\n        <Benigen />\r\n      ) : treatmentsType === \"Nak\" || treatmentsType === \"RT\" ? (\r\n        <>\r\n          <Form.Item label={label(\"patamarfoz\")} name=\"treatmentSubType\">\r\n            <Select style={styleInput} allowClear>\r\n              <Option value=\"1\">&#8544;</Option>\r\n              <Option value=\"2\">&#8545;</Option>\r\n              <Option value=\"3\">&#8546;</Option>\r\n              <Option value=\"4\">&#8547;</Option>\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item label={label(\"Description\")} name=\"treatmentTypeDesc\">\r\n            <TextArea style={styleInput} rows={3} />\r\n          </Form.Item>\r\n        </>\r\n      ) : treatmentsType ? (\r\n        <Form.Item label={label(\"Description\")} name=\"treatmentTypeDesc\">\r\n          <TextArea style={styleInput} rows={3} />\r\n        </Form.Item>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default memo(RightForm);\r\n","import { Col, Form, Row } from \"antd\";\r\nimport React, { memo } from \"react\";\r\nimport useResetForm from \"../../../hooks/useResetForm\";\r\nimport Buttons from \"../components/Buttons\";\r\nimport useAddAndResetForm from \"../hooks/useAddAndResetForm\";\r\nimport LeftForm from \"./LeftForm\";\r\nimport RightForm from \"./RightForm\";\r\n\r\nconst MualiceContent = () => {\r\n    const [form] = Form.useForm();\r\n\r\n    useAddAndResetForm({ form });\r\n\r\n    useResetForm({ form });\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={24} xl={12}>\r\n                    <LeftForm form={form} />\r\n                </Col>\r\n                <Col xs={24} xl={12}>\r\n                    <RightForm form={form} />\r\n                </Col>\r\n            </Row>\r\n            <Buttons />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default memo(MualiceContent);\r\n","import { Table } from \"antd\";\r\nimport React, { memo, useMemo } from \"react\";\r\nimport { useGlobalContext } from \"../../context/context\";\r\nimport DeleteTableRow from \"../DeleteTableRow\";\r\nimport { useMualiceContext } from \"./context\";\r\n\r\nconst MualiceTable = () => {\r\n    const { setSelectedRowTable, activeRow, setActiveRow } =\r\n        useMualiceContext();\r\n    const { recipeList, setRecipeList } = useGlobalContext();\r\n\r\n    const columns = useMemo(() => {\r\n        return [\r\n            {\r\n                title: \"Date\",\r\n                dataIndex: \"treatmentDate\",\r\n                key: \"treatmentDate\",\r\n            },\r\n            {\r\n                title: \"Brest type\",\r\n                dataIndex: \"breastType\",\r\n                key: \"breastType\",\r\n            },\r\n            {\r\n                title: \"Treatment type\",\r\n                dataIndex: \"treatmentTypeName\",\r\n                key: \"treatmentTypeName\",\r\n            },\r\n            {\r\n                title: \"Sub type\",\r\n                dataIndex: \"treatmentSubType\",\r\n                key: \"treatmentSubType\",\r\n            },\r\n            {\r\n                title: \"Sub sub type\",\r\n                dataIndex: \"treatmentSubSubType\",\r\n                key: \"treatmentSubSubType\",\r\n            },\r\n            {\r\n                title: \"Description\",\r\n                dataIndex: \"treatmentTypeDesc\",\r\n                key: \"treatmentTypeDesc\",\r\n            },\r\n            {\r\n                title: \"ER\",\r\n                dataIndex: \"ihkEr\",\r\n                key: \"ihkEr\",\r\n                render: (value) => {\r\n                    if (value === 1) {\r\n                        return \"Pozitiv\";\r\n                    } else if (value === 2) {\r\n                        return \"Negativ\";\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"ER N\",\r\n                dataIndex: \"erN\",\r\n                key: \"erN\",\r\n            },\r\n            {\r\n                title: \"PR\",\r\n                dataIndex: \"ihkPr\",\r\n                key: \"ihkPr\",\r\n                render: (value) => {\r\n                    if (value === 1) {\r\n                        return \"Pozitiv\";\r\n                    } else if (value === 2) {\r\n                        return \"Negativ\";\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                title: \"PR N\",\r\n                dataIndex: \"prN\",\r\n                key: \"prN\",\r\n            },\r\n            {\r\n                title: \"HER2\",\r\n                dataIndex: \"her2\",\r\n                key: \"her2\",\r\n            },\r\n            {\r\n                title: \"HER2 FT\",\r\n                dataIndex: \"her2FT\",\r\n                key: \"her2FT\",\r\n            },\r\n            {\r\n                title: \"K67\",\r\n                dataIndex: \"k67\",\r\n                key: \"k67\",\r\n            },\r\n            {\r\n                title: \"\",\r\n                dataIndex: \"delete\",\r\n                key: \"delete\",\r\n                width: \"20px\",\r\n                render: (value, row, index) => {\r\n                    return (\r\n                        <DeleteTableRow\r\n                            row={row}\r\n                            dataSource={recipeList}\r\n                            setDataSource={setRecipeList}\r\n                        />\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }, [recipeList]);\r\n\r\n    const onClickRow = (r) => {\r\n        if(!r.key){\r\n            r.Id = new Date().getTime();\r\n            r.key = r.Id\r\n        }\r\n        setSelectedRowTable(r);\r\n        setActiveRow(r.key);\r\n    };\r\n    return (\r\n        <>\r\n            <Table\r\n                rowClassName={(record, index) =>\r\n                    record.key === activeRow && \"rowClassName_active\"\r\n                }\r\n                locale={{ emptyText: \"The document is empty\" }}\r\n                className=\"my_table\"\r\n                columns={columns}\r\n                dataSource={recipeList}\r\n                onRow={(r) => ({\r\n                    onClick: (e) => onClickRow(r),\r\n                })}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default memo(MualiceTable);\r\n","import React, { memo } from \"react\";\r\nimport Divider from \"../Divider\";\r\nimport TabsTableMualice from \"./components/TabsTableMualice\";\r\nimport { MualiceProvider } from \"./context\";\r\nimport HeaderMualice from \"./HeaderMualice\";\r\nimport MualiceContent from \"./MualiceContent\";\r\nimport MualiceTable from \"./MualiceTable\";\r\n\r\nconst index = () => {\r\n  return (\r\n    <MualiceProvider>\r\n      <HeaderMualice />\r\n      <Divider />\r\n      <MualiceContent />\r\n      <MualiceTable />\r\n      <Divider />\r\n      <TabsTableMualice />\r\n    </MualiceProvider>\r\n  );\r\n};\r\n\r\nexport default memo(index);\r\n","import React from \"react\";\r\nimport { Tabs } from \"antd\";\r\n\r\nimport Analiz from \"../../components/Analiz\";\r\nimport Vizit from \"../../components/Vizit\";\r\nimport Morbi from \"../../components/Morbi\";\r\nimport Potient from \"../../components/Potient\";\r\nimport Anket from \"../../components/Anket\";\r\nimport Mualice from \"../../components/Mualice\";\r\nimport { useProfileContext } from \"./context\";\r\nimport { useGlobalContext } from \"../../context/context\";\r\n\r\nconst Profile = () => {\r\n    const { setActiveKey } = useProfileContext()\r\n    const { defaultActiveKey } = useGlobalContext()\r\n\r\n    const onChange = (activeKey) => {\r\n        setActiveKey(activeKey)\r\n    }\r\n    return (\r\n        <>\r\n            <Potient />\r\n\r\n            <div className=\"card-container\">\r\n                <Tabs onChange={onChange}\r\n                    type=\"card\"\r\n                    defaultActiveKey={defaultActiveKey}\r\n                    style={{ margin: \"0px 20px 0px 20px\" }}\r\n                >\r\n                    <Tabs.TabPane tab=\"Person info\" key=\"1\">\r\n                        <Anket />\r\n                    </Tabs.TabPane>\r\n                    <Tabs.TabPane tab=\"Disease history\" key=\"2\">\r\n                        <Morbi />\r\n                    </Tabs.TabPane>\r\n                    <Tabs.TabPane tab=\"Visits\" key=\"3\">\r\n                        <Vizit />\r\n                    </Tabs.TabPane>\r\n                    <Tabs.TabPane tab=\"Analysis\" key=\"4\">\r\n                        <Analiz />\r\n                    </Tabs.TabPane>\r\n                    <Tabs.TabPane tab=\"Treatment\" key=\"5\">\r\n                        <Mualice />\r\n                    </Tabs.TabPane>\r\n                </Tabs>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { ProfileProvider } from './context';\r\nimport Profile from './Profile';\r\n\r\nconst index = () => {\r\n    return (\r\n        <ProfileProvider>\r\n            <Profile />\r\n        </ProfileProvider>\r\n    );\r\n};\r\n\r\nexport default index;"],"names":["dataSource","setDataSource","row","delFunct","setTablesDataToFormValues","deleteFunct","delEl","newData","message","content","key","setOwnPropertyId","Id","id","forEach","i","onClick","e","stopPropagation","title","okText","cancelText","onConfirm","filter","item","find","style","color","Option","Select","dataIndex","inputRef","save","margin","name","rules","required","toLowerCase","allowClear","ref","notFoundContent","size","lazyLoad","className","onBlur","value","InputComponent","useMemo","onPressEnter","memo","managersList","useGlobalContext","map","c","index","JSON","stringify","cureTabName","cureTabId","EditInputType","props","inputType","editable","children","record","handleSave","setShowSaveButton","form","useState","editing","setEditing","isChangeTable","setIsChangeTable","isAddNewRow","useRef","useEffect","toggleEdit","current","focus","setFieldsValue","validateFields","values","Object","keys","includes","manager","parse","useTabs","cureTabType","console","log","childNode","paddingRight","height","EditableContext","React","EditableRow","Form","component","Provider","EditableCell","restProps","useContext","useChildrenNode","EditTable","defaultColumns","findIndex","splice","components","body","cell","columns","col","onCell","bordered","rowClassName","locale","emptyText","pagination","setFormValues","setSavedDrawingCanvas","setDescriptionsCanvas","setAnalizFileList","setRecipeList","setListRecipe","setDataFamily","setVisitDataTable","setAnalisesDataTable","setManagersPlaces","setManagersList","setDeseaseHistoryDynamicsList","setIsClearForm","clearPatient","Anket","gender","alkogol","smoke","Potient","Morbi","familyMembersList","Vizit","treatmentRB","Analiz","ProfileContext","createContext","ProfileProvider","activeKey","setActiveKey","canvasData","setCanvasData","useProfileContext","AnalizContext","AnalizProvider","isAdd","setIsAdd","isEdit","setIsEdit","setdataSource","isReset","setIsReset","selectedRowTable","setSelectedRowTable","activeRow","setActiveRow","isModalOpen","setIsModalOpen","selectOption","setSelectOption","selectedUploadFormIteem","setSelectedUploadFormIteem","breastType","setBreastType","fileList","setFileList","isNew","setIsNew","useAnalizContext","analisesDataTable","render","analyzesContent","width","DeleteTableRow","onRow","r","Date","getTime","onClickRow","Bottons","styleInput","breastSelectOpnions","other","deepCopy","data","resetForm","putListToGlobalContext","selectedRowId","setselectedRowId","copy","formObj","analyzesType","subType","analyzesSubeType","newFileList","openOtherForm","copydataForm","getFieldsValue","copyDataSource","date","resetFields","formValues","list","analyzesMediaList","useEditRowTable","handleAdd","moment","format","handleAddNext","handleCancel","handleEdit","UploadForm","imgURL","setImgURL","onPreview","file","src","url","Promise","resolve","reader","FileReader","readAsDataURL","originFileObj","onload","result","image","Image","imgWindow","window","open","document","write","outerHTML","beforeUpload","formData","FormData","append","sendRequest","res","label","TextArea","rows","accept","action","listType","defaultFileList","onChange","icon","UploadOutlined","selectStyle","marginRight","ModalAnaliz","useHandleOnClickButton","footer","danger","type","visible","onCancel","xs","xl","defaultValue","onSelect","VisitContext","VisitProvider","isControl","setisControl","selectedRatioButton","setSelectedRatioButton","useVisitContext","text","BeniganForm","useLabel","labelAlign","labelCol","span","wrapperCol","MaliganFormİtem","checked","setChecked","defaultChecked","layout","valuePropName","MaliganForm","RadioButtons","target","marginBottom","ControlForm","maliganArr","selectedVisitReason","visitReason","openMaliganForm","benignDescription","openDescriptionBenigan","visitDate","patientVisitsList","add","isClearForm","VisitContent","managersPlaces","useAddAndResetForm","useResetForm","showTime","val","placeName","placeCity","placeCountry","FooterButtons","addButton","editButton","DeleteOutlined","visitDataTable","VisitTable","useSetDataTableOnSelectedSearchPatient","onMemberClicked","setOnMemberClicked","dataList","setDataList","isModalVisible","setIsModalVisible","selectedItem","setselectedItem","activList","setactivList","countAddedFM","setCountAddedFM","dataFamily","count","push","arrSeveralAdd","onClickList","display","alignItems","s","a","getUTCMilliseconds","backgroundColor","textDecoration","fontSize","suffix","preventDefault","newDataList","deleteList","readOnly","ModalFamily","trauma","setTrauma","dead","setDead","alive","setAlive","description","setdescription","member","m","t","d","des","dataObj","saveDataFamily","background","border","boxShadow","padding","maxWidth","ownInjuryReason","setownInjuryReason","useLayoutEffect","initialValues","Received_traumas","onFieldsChange","MorbyContext","MorbyProvider","morbyFormTableData","setMorbyFormTableData","ihkEr","setihkEr","ihkPr","setihkPr","ihkHer2","setihkHer2","useMorbyContext","deseaseHistoryDynamicsList","erN","prN","Input","pathologistsList","direction","min","max","pathologistName","CanvasContext","CanvasProvider","convasImagesArrIndex","setConvasImagesArrIndex","canvasColor","setCanvasColor","disableCanvas","setDisableCanvas","imagesLength","setImagesLength","colorNumbersCanvas","setColorNumbersCanvas","descriptionInputValue","setDescriptionInputValue","brushRadius","setBrushRadius","useCanvasContext","imgName","refConvas","descriptionsCanvas","compyutationColorNumber","colorNumber","getSaveData","lines","brushColor","objProperty","hasOwn","borderRadius","CanvasHeader","savedDrawingCanvas","disableAddBtn","setdisableAddBtn","disableSaveBtn","setdisableSaveBtn","clear","nextCanvas","changeConvasImg","disabled","undo","RetweetOutlined","XpositionMouse","setXpositionMouse","YpositionMouse","setYpositionMouse","getDescriptionPointColor","arr","x","y","isIf","points","isX","Math","abs","round","num","arrSelectedColors","indexD","findEl","f","handleMouseMove","event","nativeEvent","offsetX","offsetY","dataParse","CanvasImages","imgSrc","canvasWidth","canvasHeight","useMouseMove","ErrorBoundary","onMouseMove","saveData","CanvasElement","img","canvasNumber","images","length","split","toString","getImgName","imagesCanvas1","deseaseImage1Data","imagesCanvas2","deseaseImage3Data","deseaseImage4Data","imagesCanvas3","deseaseImage5Data","Canvas","MorbyTable","analizFileList","listRecipe","recipeList","messageOnSave","nameFunc","duration","putAncet","obj","putMorbi","familyMember","familyMemberInjury","familyMemberDied","familyMemberCurrentCancer","familyMemberDesc","deseaseImageDesc","deseaseImagesList","putVizit","putMualice","putAnalyzis","fetchPatientid","handleSavePotient","patientId","patientName","patientSurName","patientPatronymic","sendObj","treatmentDynamics","useHandleSavePotient","useClearPatientFormhomeValues","offsetTop","setgender","option","marginLeft","TabsTableMualice","setCount","Type","EditTableComponent","MualiceContext","MualiceProvider","treatmentsType","settreatmentsType","SLNB","setSLNB","axilla","setAxilla","useMualiceContext","HeaderMualice","selectedTreatmentId","setselectedTreatmentId","treatmentDate","treatmentTypeName","axillaDeseksiya","LeftForm","labelWrap","RightForm","treatmentSubType","treatmentSubSubType","treatmentTypeDesc","MualiceContent","MualiceTable","defaultActiveKey","tab","Mualice"],"sourceRoot":""}