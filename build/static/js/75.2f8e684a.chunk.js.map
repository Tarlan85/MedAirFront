{"version":3,"file":"static/js/75.2f8e684a.chunk.js","mappings":"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","sources":["components/DeleteTableRow.js","pages/Home/hooks/useClearPatientFormhomeValues.js","api/index.js","pages/Home/api.js","pages/Home/VizitForm.js","pages/Home/HeaderHomePage.js","pages/Home/components/SelectStatus.js","pages/Home/hooks/useUpdatePage.js","pages/Home/index.js","pages/Search/hooks/useClearDataProfileTables.js","pages/Search/hooks/useOnRowTable.js"],"sourcesContent":["import { Popconfirm, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { message } from \"antd\";\r\n\r\nfunction DeleteTableRow({ dataSource, setDataSource, row, delFunct, setTablesDataToFormValues }) {\r\n    const onClick = (e) => {\r\n        setOwnPropertyId();\r\n        const newData = dataSource.filter((item) => item.Id !== row.Id);\r\n        const delEl = dataSource.find((item) => item.Id === row.Id);\r\n        if (delFunct) {\r\n            deleteFunct({ delEl, newData });\r\n        } else {\r\n            if(setTablesDataToFormValues){\r\n                setTablesDataToFormValues(newData)\r\n            }\r\n            setDataSource(newData);\r\n        }\r\n    };\r\n    const deleteFunct = async ({ delEl, newData }) => {\r\n        message.loading({ content: \"Loading...\", key: \"delete\" });\r\n        let res = await delFunct(delEl);\r\n    };\r\n    const setOwnPropertyId = () => {\r\n        if (row.Id) {\r\n            return;\r\n        } else if (row.id) {\r\n            row.Id = row.id;\r\n            dataSource.forEach((i) => (i.Id = i.id));\r\n        }\r\n    };\r\n    return (\r\n        <Typography.Link>\r\n            <div onClick={(e) => e.stopPropagation()}>\r\n                <Popconfirm\r\n                    title=\"Are you sure you want to delete this item?\"\r\n                    okText=\"Yes\"\r\n                    cancelText=\"No\"\r\n                    onConfirm={onClick}\r\n                >\r\n                    <div style={{ color: \"red\" }}>\r\n                        <DeleteOutlined />\r\n                    </div>\r\n                </Popconfirm>\r\n            </div>\r\n        </Typography.Link>\r\n    );\r\n}\r\n\r\nexport default DeleteTableRow;\r\n","import { useGlobalContext } from \"../../../context/context\";\r\n\r\nfunction useClearPatientFormhomeValues() {\r\n\r\n  const {\r\n      setFormValues,\r\n      setSavedDrawingCanvas,\r\n      setDescriptionsCanvas,\r\n      setAnalizFileList,\r\n      setRecipeList,\r\n      setListRecipe,\r\n      setDataFamily,\r\n      setVisitDataTable,\r\n      setAnalisesDataTable,\r\n      setManagersPlaces,\r\n      setManagersList,\r\n      setDeseaseHistoryDynamicsList,\r\n      setIsClearForm,\r\n  } = useGlobalContext();\r\n\r\n  const clearPatient = () => {\r\n    setIsClearForm(true)\r\n      setFormValues({\r\n          Anket: { gender: \"Female\", alkogol: 0, smoke: 0 },\r\n          Potient: {},\r\n          Morbi: { familyMembersList: [] },\r\n          Vizit: {},\r\n          treatmentRB: {},\r\n          Analiz: {},\r\n      });\r\n      setSavedDrawingCanvas({});\r\n      setDescriptionsCanvas({});\r\n      setAnalizFileList({});\r\n      setRecipeList([]);\r\n      setListRecipe([]);\r\n      setDataFamily([]);\r\n      setDataFamily([]);\r\n      setVisitDataTable([]);\r\n      setAnalisesDataTable([]);\r\n      setManagersPlaces([]);\r\n      setManagersList([]);\r\n      setDeseaseHistoryDynamicsList([])\r\n  };\r\n  return { clearPatient }\r\n}\r\n\r\nexport default useClearPatientFormhomeValues","import sendRequest from \"./sendRequest\";\r\n\r\nexport const fetchPatientid = async () => {\r\n    let res = await sendRequest(\"patientid\", {}, \"get\");\r\n    return res.data;\r\n};\r\nexport const putVizit = (obj) => {\r\n    sendRequest(\"visits\", obj, \"post\");\r\n};\r\nexport const putVizitFromCalendar = (obj) => {\r\n    sendRequest(\"visitsformcalendar\", obj, \"post\");\r\n};\r\nexport const putAnalyzis = (obj) => {\r\n    sendRequest(\"analyses\", obj, \"post\");\r\n};\r\nexport const putAnket = (obj) => {\r\n    sendRequest(\"vite\", obj, \"post\");\r\n};\r\nexport const putMualice = (obj) => {\r\n    sendRequest(\"treatment\", obj, \"post\");\r\n};\r\n","import { message } from \"antd\";\r\nimport { fetchPatientid, putAnket, putVizitFromCalendar } from \"../../api\";\r\nimport sendRequest from \"../../api/sendRequest\";\r\n\r\nconst controlPatient = async (patientId) =>\r\n    sendRequest(`patients/${patientId}`);\r\n\r\nexport const handleAddVisit = async ({ sendObj }) => {\r\n    let patientId;\r\n    if (sendObj.patientId) {\r\n        let id = sendObj.patientId;\r\n        controlPatient(id).then((res) => {\r\n            if (!res?.data) {\r\n                message.warning({\r\n                    content: \"The Patient not find\",\r\n                    key: \"info_message\",\r\n                    duration: 4,\r\n                });\r\n            }else{\r\n              patientId = sendObj.patientId;\r\n            }\r\n        });\r\n\r\n        patientId = sendObj.patientId;\r\n    } else {\r\n        patientId = await fetchPatientid();\r\n    }\r\n    const {\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        visitDate,\r\n        phoneNumber,\r\n        status,\r\n        visitReason,\r\n    } = sendObj;\r\n    let sendObjVisit = {\r\n        patientVisitsList: [\r\n            {\r\n                patientId,\r\n                status,\r\n                visitDate,\r\n                visitReason,\r\n            },\r\n        ],\r\n    };\r\n    let sendObjAnket = {\r\n        patientId,\r\n        patientName,\r\n        patientSurName,\r\n        patientPatronymic,\r\n        phoneNumber,\r\n    };\r\n    if (patientId) {\r\n        if (!sendObj.patientId) {\r\n            await putAnket(sendObjAnket);\r\n        }\r\n        putVizitFromCalendar(sendObjVisit);\r\n    }\r\n};\r\n","import { DatePicker, Form, Input, Row, Select } from \"antd\";\r\nimport { MaskedInput } from \"antd-mask-input\";\r\nimport moment from \"moment\";\r\nimport React from \"react\";\r\nimport { useGlobalContext } from \"../../context/context\";\r\nimport { handleAddVisit } from \"./api\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst VizitForm = () => {\r\n    const [form] = Form.useForm();\r\n    const { formVisitCalendar, setformVisitCalendar, isAddVisit, setIsAddVisit } = useGlobalContext();\r\n\r\n    const onFieldsChange = ([{ name, value }]) => {\r\n        setformVisitCalendar({ ...formVisitCalendar, [name]: value });\r\n    };\r\n    const onClickAdd = async () => {\r\n        let visitDate = formVisitCalendar.visitDate;\r\n        formVisitCalendar.visitDate =\r\n            moment(visitDate).format(\"YYYY-MM-DD HH:mm\");\r\n        const sendObj = formVisitCalendar;\r\n        \r\n        await handleAddVisit({ sendObj });\r\n        setIsAddVisit(!isAddVisit)\r\n    };\r\n    return (\r\n        <div>\r\n            <Row justify=\"space-between\" style={{ marginLeft: \"5%\" }}>\r\n                <Form\r\n                    style={{ margin: \"10px\" }}\r\n                    onFieldsChange={onFieldsChange}\r\n                    form={form}\r\n                    layout={\"inline\"}\r\n                >\r\n                    <Form.Item label=\"Id\" name=\"patientId\">\r\n                        <Input type=\"number\" allowClear />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Name\" name=\"patientName\">\r\n                        <Input allowClear />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Surname\" name=\"patientSurName\">\r\n                        <Input allowClear />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Reason\" name=\"visitReason\">\r\n                        <Input allowClear />\r\n                    </Form.Item>\r\n                </Form>\r\n            </Row>\r\n            <Row style={{ marginLeft: \"5%\" }}>\r\n                <Form\r\n                    style={{ margin: \"10px\" }}\r\n                    onFieldsChange={onFieldsChange}\r\n                    form={form}\r\n                    layout={\"inline\"}\r\n                >\r\n                    <Form.Item label=\"Date\" name=\"visitDate\">\r\n                        <DatePicker\r\n                            showTime\r\n                            allowClear\r\n                            format={\"YYYY-MM-DD HH:mm\"}\r\n                            defaultValue={moment()}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Mobile Number\" name=\"phoneNumber\">\r\n                        <MaskedInput\r\n                            allowClear\r\n                            style={{ width: \"130px\" }}\r\n                            mask={\"000 000 00 00\"}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Status\" name=\"status\">\r\n                        <Select allowClear style={{ width: 120 }}>\r\n                            <Option value=\"unsolved\">Unsolved</Option>\r\n                            <Option value=\"approved\">Approved</Option>\r\n                        </Select>\r\n                    </Form.Item>\r\n                    <button onClick={onClickAdd} className=\"new_button\">\r\n                        Add\r\n                    </button>\r\n                </Form>\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VizitForm;\r\n","import { Row } from \"antd\";\r\nimport React from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { useGlobalContext } from \"../../context/context\";\r\nimport useClearPatientFormhomeValues from \"./hooks/useClearPatientFormhomeValues\";\r\nimport VizitForm from \"./VizitForm\";\r\n\r\nconst HeaderHomePage = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const {\r\n    isAddVisit,\r\n    setIsAddVisit,\r\n    setformVisitCalendar,\r\n  } = useGlobalContext();\r\n\r\n  const onClickAdd = () => {\r\n    setIsAddVisit(true);\r\n    setformVisitCalendar({});\r\n  };\r\n\r\n  const { clearPatient } = useClearPatientFormhomeValues();\r\n\r\n  const onClickNewPatientButton = () => {\r\n    clearPatient();\r\n    navigate(\"/profile\");\r\n  };\r\n  return (\r\n    <>\r\n      <Row style={{ marginLeft: \"5%\" }}>\r\n        <button onClick={onClickNewPatientButton} className=\"new_button\">\r\n          New Patient\r\n        </button>\r\n        <button onClick={onClickAdd} className=\"new_button\">\r\n          Add visit\r\n        </button>\r\n      </Row>\r\n      {isAddVisit ? <VizitForm /> : \"\"}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HeaderHomePage;\r\n","import { Select } from \"antd\";\r\nimport React, { memo } from \"react\";\r\nimport sendRequest from \"../../../api/sendRequest\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SelectStatus = ({ value, row, updatePage }) => {\r\n\r\n    const onSelect = async (val) => {\r\n        const { id } = row;\r\n        const sendObj = {\r\n            id: id,\r\n            status: val,\r\n        };\r\n        await sendRequest(\"visittable\", sendObj, \"post\");\r\n        updatePage()\r\n    };\r\n\r\n    return (\r\n        <Select\r\n            onSelect={onSelect}\r\n            defaultValue={value}\r\n            allowClear\r\n            style={{ width: 120 }}\r\n        >\r\n            <Option value=\"unsolved\">Unsolved</Option>\r\n            <Option value=\"approved\">Approved</Option>\r\n        </Select>\r\n    );\r\n};\r\n\r\nexport default memo(SelectStatus);\r\n","import moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst useUpdatePage = ({ getDataTable }) => {\r\n  const [isChangeDataTable, setIsChangeDataTable] = useState(false);\r\n\r\n  const updatePage = (row) => {\r\n    console.log(row.visitDate);\r\n    let time = row?.visitDate\r\n      ? row.visitDate\r\n      : moment().format(\"YYYY-MM-DD 00:00:00\");\r\n    getDataTable(time);\r\n    setIsChangeDataTable(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isChangeDataTable) {\r\n      setIsChangeDataTable(false);\r\n    }\r\n  }, [isChangeDataTable]);\r\n\r\n  return { isChangeDataTable, updatePage };\r\n};\r\n\r\nexport default useUpdatePage;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { Badge, Row } from \"antd\";\r\nimport { Calendar } from \"antd\";\r\nimport { Table } from \"antd\";\r\nimport sendRequest from \"../../api/sendRequest\";\r\nimport moment from \"moment\";\r\nimport HeaderHomePage from \"./HeaderHomePage\";\r\nimport SelectStatus from \"./components/SelectStatus\";\r\nimport { useGlobalContext } from \"../../context/context\";\r\nimport DeleteTableRow from \"../../components/DeleteTableRow\";\r\nimport useUpdatePage from \"./hooks/useUpdatePage\";\r\nimport useOnRowTable from \"../Search/hooks/useOnRowTable\";\r\n\r\nconst getListData = (value, dataSource) => {\r\n  let listData = [];\r\n  dataSource.forEach((i) => {\r\n    let date = i.visitDate.slice(0, 10);\r\n    if (date === moment(value).format(\"YYYY-MM-DD\")) {\r\n      listData.push({\r\n        type: i.status === \"approved\" ? \"success\" : \"warning\",\r\n        content: i.patientName,\r\n        id: i.id,\r\n      });\r\n    }\r\n  });\r\n  return listData;\r\n};\r\n\r\nconst Home = () => {\r\n  const { isAddVisit } = useGlobalContext();\r\n\r\n  const [dataSource, setDataSource] = useState([]);\r\n\r\n  const getDataTable = async (data) => {\r\n    let sendObj = {};\r\n    if (data) {\r\n      sendObj.moment = data;\r\n    }\r\n    let res = await sendRequest(\"visits/\" + data);\r\n    setDataSource(res.data);\r\n  };\r\n\r\n  const { isChangeDataTable, updatePage } = useUpdatePage({ getDataTable });\r\n\r\n  useEffect(() => {\r\n    if (!isAddVisit) {\r\n      getDataTable(moment().format(\"YYYY-MM-DD 00:00:00\"));\r\n    }\r\n  }, [isAddVisit]);\r\n\r\n  function onPanelChange(data, mode) {}\r\n\r\n  function onChange(val) {\r\n    const data = moment(val._d).format(\"YYYY-MM-DD 00:00:00\");\r\n    getDataTable(data);\r\n  }\r\n  const delFunct = async (delItem) => {\r\n    let Id = delItem.Id;\r\n    let res = await sendRequest(\"visits/\" + Id, {}, \"delete\");\r\n    updatePage();\r\n    return res;\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Patient Number\",\r\n      dataIndex: \"patientId\",\r\n      ellipsis: true,\r\n    },\r\n    {\r\n      title: \"Time\",\r\n      dataIndex: \"visitDate\",\r\n      width: 150\r\n    },\r\n    {\r\n      title: \"Name\",\r\n      dataIndex: \"patientName\",\r\n    },\r\n    {\r\n      title: \"Surname\",\r\n      dataIndex: \"patientSurName\",\r\n    },\r\n    {\r\n      title: \"Patronymic\",\r\n      dataIndex: \"patientPatronymic\",\r\n      ellipsis: true,\r\n    },\r\n    {\r\n      title: \"Age\",\r\n      dataIndex: \"birthDate\",\r\n      render: (value) => {\r\n        if (!value) return \"\";\r\n        else {\r\n          return moment().diff(value, \"years\");\r\n        }\r\n      },\r\n    },\r\n    {\r\n      title: \"Mobile number\",\r\n      ellipsis: true,\r\n      width: 120,\r\n      dataIndex: \"phoneNumber\",\r\n    },\r\n\r\n    {\r\n      title: \"Reason\",\r\n      dataIndex: \"visitReason\",\r\n    },\r\n    {\r\n      title: \"Address\",\r\n      dataIndex: \"placeName\",\r\n    },\r\n    {\r\n      title: \"Recomendation\",\r\n      dataIndex: \"recommendationPerson\",\r\n      ellipsis: true,\r\n    },\r\n    {\r\n      title: \"Status\",\r\n      dataIndex: \"status\",\r\n      width: 150,\r\n      render: (value, row, index) => {\r\n        return (\r\n          <div\r\n            className=\"xxxx\"\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              e.preventDefault();\r\n            }}\r\n          >\r\n            <SelectStatus\r\n              value={value}\r\n              row={row}\r\n              updatePage={() => updatePage(row)}\r\n            />\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: \"\",\r\n      width: 40,\r\n      dataIndex: \"delete\",\r\n      key: \"delete\",\r\n      render: (value, row, index) => {\r\n        return (\r\n          <DeleteTableRow\r\n            row={row}\r\n            dataSource={dataSource}\r\n            setDataSource={setDataSource}\r\n            delFunct={delFunct}\r\n          />\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  const dateCellRender = useMemo(\r\n    (value) => {\r\n      if (dataSource[0]) {\r\n        return (value) => {\r\n          const listData = getListData(value, dataSource);\r\n          if (listData[0]) {\r\n            return <div style={{ borderTop: \"1px solid black\" }}></div>;\r\n          }\r\n        };\r\n      }\r\n    },\r\n    [dataSource, isAddVisit, isChangeDataTable]\r\n  );\r\n  const { onRowTable } = useOnRowTable();\r\n\r\n  const getRowClassName = (record) => {\r\n    if (record.visitReason === \"operation\") return \"table_row_pink_color\";\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <HeaderHomePage />\r\n      <Row>\r\n        <Calendar\r\n          dateCellRender={dateCellRender}\r\n          className=\"CallCalendar\"\r\n          fullscreen={false}\r\n          onPanelChange={onPanelChange}\r\n          onChange={onChange}\r\n        />\r\n      </Row>\r\n      <Row>\r\n        <div style={{border: '1px solid gray', position: 'sticky', marginTop:'20px'}}>\r\n        <Table\r\n          bordered={true}\r\n          // scroll={{\r\n          //   x: window.innerHeight\r\n          // }}\r\n          pagination={false}\r\n          columns={columns}\r\n          dataSource={dataSource}\r\n          rowClassName={getRowClassName}\r\n          onRow={(record, index) => ({\r\n            onClick: (e) => onRowTable(record, index),\r\n          })}\r\n        />\r\n        </div>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useGlobalContext } from '../../../context/context';\r\n\r\nfunction useClearDataProfileTables() {\r\n    const {\r\n      setRecipeList,\r\n      setListRecipe,\r\n      setFormValues,\r\n      setVisitDataTable,\r\n      setAnalisesDataTable,\r\n    } = useGlobalContext();\r\n\r\n    const clearDataProfileTables = () => {\r\n        setFormValues({\r\n            Anket: { gender: \"Female\", alkogol: 0, smoke: 0 },\r\n            Potient: {},\r\n            Morbi: {familyMembersList: []},\r\n            Vizit: {},\r\n            treatmentRB: {},\r\n            Analiz: {},\r\n        })\r\n        setVisitDataTable([]);\r\n        setRecipeList([]);\r\n        setListRecipe([]);\r\n        setAnalisesDataTable([]);\r\n    }\r\n  return {clearDataProfileTables}\r\n}\r\n\r\nexport default useClearDataProfileTables","import moment from \"moment\";\r\nimport { useNavigate } from \"react-router\";\r\nimport sendRequest from \"../../../api/sendRequest\";\r\nimport { useGlobalContext } from \"../../../context/context\";\r\nimport useClearDataProfileTables from \"./useClearDataProfileTables\";\r\n\r\nconst useOnRowTable = () => {\r\n  const {\r\n    formValues,\r\n    setRecipeList,\r\n    setListRecipe,\r\n    setFormValues,\r\n    setVisitDataTable,\r\n    setAnalisesDataTable,\r\n    setSavedDrawingCanvas,\r\n    setDescriptionsCanvas,\r\n    setDataFamily,\r\n    setDeseaseHistoryDynamicsList,\r\n  } = useGlobalContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const getAncet = async (id) => {\r\n    let res = await sendRequest(\"vite/\" + id, {}, \"get\");\r\n    return res\r\n  };\r\n\r\n  const settingDataFamily = (res) => {\r\n    if (res.data?.familyMembersList) {\r\n      try {\r\n        let arrFamily = [];\r\n        res.data.familyMembersList.forEach((family) => {\r\n          const {\r\n            familyMember,\r\n            familyMemberInjury,\r\n            familyMemberDied,\r\n            familyMemberCurrentCancer,\r\n            familyMemberDesc,\r\n          } = family;\r\n          arrFamily.push({\r\n            [familyMember]: {\r\n              trauma: familyMemberInjury,\r\n              dead: familyMemberDied,\r\n              alive: familyMemberCurrentCancer,\r\n              description: familyMemberDesc,\r\n            },\r\n          });\r\n          setDataFamily(arrFamily);\r\n        });\r\n      } catch (e) {}\r\n    }\r\n  };\r\n  const getMorby = async (id) => {\r\n    let res = await sendRequest(\"morby/\" + id, {}, \"get\");\r\n    if (res) {\r\n      formValues.Morbi = res.data;\r\n      settingDataFamily(res);\r\n      setFormValues(formValues);\r\n      setSavedDrawingCanvas(res.data.deseaseImagesList);\r\n      if (res.data.deseaseImagesList?.deseaseImageDesc) {\r\n        let descCanvas = JSON.parse(\r\n          res.data.deseaseImagesList.deseaseImageDesc\r\n        );\r\n        setDescriptionsCanvas(descCanvas);\r\n      }\r\n      setDeseaseHistoryDynamicsList(res.data.deseaseHistoryDynamicsList);\r\n    }\r\n  };\r\n  const getVizit = async (id) => {\r\n    let res = await sendRequest(\"visits/patientId/\" + id, {}, \"get\");\r\n\r\n    try {\r\n      if (res.data[0]) {\r\n        let dataVT = res.data;\r\n        setVisitDataTable(dataVT);\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  const getTreatment = async (id) => {\r\n    let res = await sendRequest(\"treatment/\" + id, {}, \"get\");\r\n    try {\r\n      if (res.data) {\r\n        formValues.treatmentRB = res.data;\r\n        setFormValues(formValues);\r\n        let treatmentDynamics = res.data.treatmentDynamics;\r\n        let recipeList = res.data.recipeList;\r\n        setRecipeList(treatmentDynamics);\r\n        setListRecipe(recipeList);\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  const getAnalyses = async (id) => {\r\n    let res = await sendRequest(\"analyses/\" + id, {}, \"get\");\r\n    try {\r\n      if (res.data[0]) {\r\n        let dataAT = res.data;\r\n        setAnalisesDataTable(dataAT);\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const fetchData = (id) => {\r\n    try {\r\n      Promise.all([\r\n        getAncet(id),\r\n        getMorby(id),\r\n        getVizit(id),\r\n        getTreatment(id),\r\n        getAnalyses(id),\r\n      ]);\r\n    } catch (err) {\r\n    }\r\n  };\r\n\r\n  const { clearDataProfileTables } = useClearDataProfileTables();\r\n\r\n  const onRowTable = async (record) => {\r\n    clearDataProfileTables();\r\n    // record.birthDate = moment(record.birthDate);\r\n    \r\n    try {\r\n      const res = await getAncet(record.patientId)\r\n      console.log(res.data)\r\n      res.data.birthDate = res.data.birthDate ? moment(res.data.birthDate) : null\r\n      formValues.Anket = res.data;\r\n      formValues.Potient = res.data;\r\n      setFormValues(formValues);\r\n      await fetchData(record.patientId);\r\n      navigate(\"/profile\");\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  return { onRowTable };\r\n};\r\n\r\nexport default useOnRowTable;\r\n"],"names":["dataSource","setDataSource","row","delFunct","setTablesDataToFormValues","deleteFunct","delEl","newData","message","content","key","setOwnPropertyId","Id","id","forEach","i","onClick","e","stopPropagation","title","okText","cancelText","onConfirm","filter","item","find","style","color","useGlobalContext","setFormValues","setSavedDrawingCanvas","setDescriptionsCanvas","setAnalizFileList","setRecipeList","setListRecipe","setDataFamily","setVisitDataTable","setAnalisesDataTable","setManagersPlaces","setManagersList","setDeseaseHistoryDynamicsList","setIsClearForm","clearPatient","Anket","gender","alkogol","smoke","Potient","Morbi","familyMembersList","Vizit","treatmentRB","Analiz","fetchPatientid","sendRequest","res","data","putVizitFromCalendar","obj","controlPatient","patientId","handleAddVisit","sendObj","then","duration","patientName","patientSurName","patientPatronymic","visitDate","phoneNumber","status","visitReason","sendObjVisit","patientVisitsList","sendObjAnket","Option","Select","Form","form","formVisitCalendar","setformVisitCalendar","isAddVisit","setIsAddVisit","onFieldsChange","name","value","onClickAdd","moment","format","justify","marginLeft","margin","layout","label","type","allowClear","showTime","defaultValue","width","mask","className","navigate","useNavigate","useClearPatientFormhomeValues","SelectStatus","updatePage","onSelect","val","memo","getDataTable","useState","isChangeDataTable","setIsChangeDataTable","useEffect","console","log","time","useUpdatePage","delItem","columns","dataIndex","ellipsis","render","diff","index","preventDefault","DeleteTableRow","dateCellRender","useMemo","listData","slice","push","getListData","borderTop","onRowTable","useOnRowTable","fullscreen","onPanelChange","mode","onChange","_d","border","position","marginTop","bordered","pagination","rowClassName","record","onRow","clearDataProfileTables","formValues","getAncet","settingDataFamily","arrFamily","family","familyMember","familyMemberInjury","familyMemberDied","familyMemberCurrentCancer","familyMemberDesc","trauma","dead","alive","description","getMorby","deseaseImagesList","deseaseImageDesc","descCanvas","JSON","parse","deseaseHistoryDynamicsList","getVizit","dataVT","getTreatment","treatmentDynamics","recipeList","getAnalyses","dataAT","fetchData","Promise","all","err","useClearDataProfileTables","birthDate"],"sourceRoot":""}